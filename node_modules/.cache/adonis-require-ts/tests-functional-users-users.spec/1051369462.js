"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const runner_1 = require("@japa/runner");
const factories_1 = global[Symbol.for('ioc.use')]("Database/factories");
runner_1.test.group('User', (group) => {
    group.each.setup(async () => {
        await Database_1.default.beginGlobalTransaction();
        return () => Database_1.default.rollbackGlobalTransaction();
    });
    (0, runner_1.test)('it should create an user', async ({ client, assert }) => {
        const userPayload = {
            email: 'test@test.com',
            username: 'test',
            password: 'test',
            avatar: 'https://images.com/image/1',
        };
        const response = await client.post('/users').json(userPayload);
        const { password, avatar, ...expected } = userPayload;
        response.assertStatus(201);
        response.assertBodyContains({ user: expected });
        assert.notExists(response.body().user.password, 'Password defined');
    });
    (0, runner_1.test)('it should update an user', async ({ client }) => {
        const user = await factories_1.UserFactory.create();
        const email = 'test@test.com';
        const avatar = 'https://github.com/image.png';
        const response = await client
            .put(`/users/${user.id}`)
            .json({
            email,
            avatar,
            password: user.password,
        })
            .loginAs(user);
        response.assertStatus(200);
        response.assertBodyContains({
            user: {
                email,
                avatar,
                id: user.id,
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlcnMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVzZXJzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyRkFBaUQ7QUFDakQseUNBQW1DO0FBQ25DLHdFQUFnRDtBQVloRCxhQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO0lBQzNCLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQzFCLE1BQU0sa0JBQVEsQ0FBQyxzQkFBc0IsRUFBRSxDQUFBO1FBQ3ZDLE9BQU8sR0FBRyxFQUFFLENBQUMsa0JBQVEsQ0FBQyx5QkFBeUIsRUFBRSxDQUFBO0lBQ25ELENBQUMsQ0FBQyxDQUFBO0lBRUYsSUFBQSxhQUFJLEVBQUMsMEJBQTBCLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUU7UUFDNUQsTUFBTSxXQUFXLEdBQUc7WUFDbEIsS0FBSyxFQUFFLGVBQWU7WUFDdEIsUUFBUSxFQUFFLE1BQU07WUFDaEIsUUFBUSxFQUFFLE1BQU07WUFDaEIsTUFBTSxFQUFFLDRCQUE0QjtTQUNyQyxDQUFBO1FBQ0QsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUU5RCxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxHQUFHLFFBQVEsRUFBRSxHQUFHLFdBQVcsQ0FBQTtRQUVyRCxRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQzFCLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQy9DLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsa0JBQWtCLENBQUMsQ0FBQTtJQUNyRSxDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUEsYUFBSSxFQUFDLDBCQUEwQixFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUU7UUFDcEQsTUFBTSxJQUFJLEdBQUcsTUFBTSx1QkFBVyxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBQ3ZDLE1BQU0sS0FBSyxHQUFHLGVBQWUsQ0FBQTtRQUM3QixNQUFNLE1BQU0sR0FBRyw4QkFBOEIsQ0FBQTtRQUU3QyxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU07YUFDMUIsR0FBRyxDQUFDLFVBQVUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO2FBQ3hCLElBQUksQ0FBQztZQUNKLEtBQUs7WUFDTCxNQUFNO1lBQ04sUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ3hCLENBQUM7YUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFaEIsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMxQixRQUFRLENBQUMsa0JBQWtCLENBQUM7WUFDMUIsSUFBSSxFQUFFO2dCQUNKLEtBQUs7Z0JBQ0wsTUFBTTtnQkFDTixFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7YUFDWjtTQUNGLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGF0YWJhc2UgZnJvbSAnQGlvYzpBZG9uaXMvTHVjaWQvRGF0YWJhc2UnXG5pbXBvcnQgeyB0ZXN0IH0gZnJvbSAnQGphcGEvcnVubmVyJ1xuaW1wb3J0IHsgVXNlckZhY3RvcnkgfSBmcm9tICdEYXRhYmFzZS9mYWN0b3JpZXMnXG5cbi8qXG4gIHtcbiAgICBcInVzZXJzXCI6IHtcbiAgICAgIFwiZW1haWxcIjogc3RyaW5nLFxuICAgICAgXCJ1c2VybmFtZVwiOiBzdHJpbmcsXG4gICAgICBcInBhc3N3b3JkXCI6IHN0cmluZyxcbiAgICAgIFwiYXZhdGFyXCI6IHN0cmluZ1xuICAgIH1cbiAgfVxuKi9cbnRlc3QuZ3JvdXAoJ1VzZXInLCAoZ3JvdXApID0+IHtcbiAgZ3JvdXAuZWFjaC5zZXR1cChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgRGF0YWJhc2UuYmVnaW5HbG9iYWxUcmFuc2FjdGlvbigpXG4gICAgcmV0dXJuICgpID0+IERhdGFiYXNlLnJvbGxiYWNrR2xvYmFsVHJhbnNhY3Rpb24oKVxuICB9KVxuXG4gIHRlc3QoJ2l0IHNob3VsZCBjcmVhdGUgYW4gdXNlcicsIGFzeW5jICh7IGNsaWVudCwgYXNzZXJ0IH0pID0+IHtcbiAgICBjb25zdCB1c2VyUGF5bG9hZCA9IHtcbiAgICAgIGVtYWlsOiAndGVzdEB0ZXN0LmNvbScsXG4gICAgICB1c2VybmFtZTogJ3Rlc3QnLFxuICAgICAgcGFzc3dvcmQ6ICd0ZXN0JyxcbiAgICAgIGF2YXRhcjogJ2h0dHBzOi8vaW1hZ2VzLmNvbS9pbWFnZS8xJyxcbiAgICB9XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQucG9zdCgnL3VzZXJzJykuanNvbih1c2VyUGF5bG9hZClcblxuICAgIGNvbnN0IHsgcGFzc3dvcmQsIGF2YXRhciwgLi4uZXhwZWN0ZWQgfSA9IHVzZXJQYXlsb2FkXG5cbiAgICByZXNwb25zZS5hc3NlcnRTdGF0dXMoMjAxKVxuICAgIHJlc3BvbnNlLmFzc2VydEJvZHlDb250YWlucyh7IHVzZXI6IGV4cGVjdGVkIH0pXG4gICAgYXNzZXJ0Lm5vdEV4aXN0cyhyZXNwb25zZS5ib2R5KCkudXNlci5wYXNzd29yZCwgJ1Bhc3N3b3JkIGRlZmluZWQnKVxuICB9KVxuXG4gIHRlc3QoJ2l0IHNob3VsZCB1cGRhdGUgYW4gdXNlcicsIGFzeW5jICh7IGNsaWVudCB9KSA9PiB7XG4gICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXJGYWN0b3J5LmNyZWF0ZSgpXG4gICAgY29uc3QgZW1haWwgPSAndGVzdEB0ZXN0LmNvbSdcbiAgICBjb25zdCBhdmF0YXIgPSAnaHR0cHM6Ly9naXRodWIuY29tL2ltYWdlLnBuZydcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50XG4gICAgICAucHV0KGAvdXNlcnMvJHt1c2VyLmlkfWApXG4gICAgICAuanNvbih7XG4gICAgICAgIGVtYWlsLFxuICAgICAgICBhdmF0YXIsXG4gICAgICAgIHBhc3N3b3JkOiB1c2VyLnBhc3N3b3JkLFxuICAgICAgfSlcbiAgICAgIC5sb2dpbkFzKHVzZXIpXG5cbiAgICByZXNwb25zZS5hc3NlcnRTdGF0dXMoMjAwKVxuICAgIHJlc3BvbnNlLmFzc2VydEJvZHlDb250YWlucyh7XG4gICAgICB1c2VyOiB7XG4gICAgICAgIGVtYWlsLFxuICAgICAgICBhdmF0YXIsXG4gICAgICAgIGlkOiB1c2VyLmlkLFxuICAgICAgfSxcbiAgICB9KVxuICB9KVxufSlcbiJdfQ==