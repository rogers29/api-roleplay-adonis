"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const runner_1 = require("@japa/runner");
const factories_1 = global[Symbol.for('ioc.use')]("Database/factories");
runner_1.test.group('User', (group) => {
    group.each.setup(async () => {
        await Database_1.default.beginGlobalTransaction();
        return () => Database_1.default.rollbackGlobalTransaction();
    });
    (0, runner_1.test)('it should create an user', async ({ client, assert }) => {
        const userPayload = {
            email: 'test@test.com',
            username: 'test',
            password: 'test',
            avatar: 'https://images.com/image/1',
        };
        const response = await client.post('/users').json(userPayload);
        const { password, avatar, ...expected } = userPayload;
        response.assertStatus(201);
        response.assertBodyContains({ user: expected });
        assert.notExists(response.body().user.password, 'Password defined');
    });
    (0, runner_1.test)('it should update an user', async ({ client, assert }) => {
        const user = await factories_1.UserFactory.create();
        const email = 'test@test.com';
        const avatar = 'https://github.com/image.png';
        const response = await client
            .put(`/users/${user.id}`)
            .json({
            email,
            avatar,
            password: user.password,
        })
            .loginAs(user);
        response.assertStatus(200);
        response.assertBodyContains({
            user: {
                email,
                avatar,
                id: user.id,
            },
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlcnMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVzZXJzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyRkFBaUQ7QUFDakQseUNBQW1DO0FBQ25DLHdFQUFnRDtBQVloRCxhQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO0lBQzNCLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQzFCLE1BQU0sa0JBQVEsQ0FBQyxzQkFBc0IsRUFBRSxDQUFBO1FBQ3ZDLE9BQU8sR0FBRyxFQUFFLENBQUMsa0JBQVEsQ0FBQyx5QkFBeUIsRUFBRSxDQUFBO0lBQ25ELENBQUMsQ0FBQyxDQUFBO0lBRUYsSUFBQSxhQUFJLEVBQUMsMEJBQTBCLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUU7UUFDNUQsTUFBTSxXQUFXLEdBQUc7WUFDbEIsS0FBSyxFQUFFLGVBQWU7WUFDdEIsUUFBUSxFQUFFLE1BQU07WUFDaEIsUUFBUSxFQUFFLE1BQU07WUFDaEIsTUFBTSxFQUFFLDRCQUE0QjtTQUNyQyxDQUFBO1FBQ0QsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUU5RCxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxHQUFHLFFBQVEsRUFBRSxHQUFHLFdBQVcsQ0FBQTtRQUVyRCxRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQzFCLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQy9DLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsa0JBQWtCLENBQUMsQ0FBQTtJQUNyRSxDQUFDLENBQUMsQ0FBQTtJQUVGLElBQUEsYUFBSSxFQUFDLDBCQUEwQixFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFO1FBQzVELE1BQU0sSUFBSSxHQUFHLE1BQU0sdUJBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUN2QyxNQUFNLEtBQUssR0FBRyxlQUFlLENBQUE7UUFDN0IsTUFBTSxNQUFNLEdBQUcsOEJBQThCLENBQUE7UUFFN0MsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNO2FBQzFCLEdBQUcsQ0FBQyxVQUFVLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQzthQUN4QixJQUFJLENBQUM7WUFDSixLQUFLO1lBQ0wsTUFBTTtZQUNOLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtTQUN4QixDQUFDO2FBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRWhCLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDMUIsUUFBUSxDQUFDLGtCQUFrQixDQUFDO1lBQzFCLElBQUksRUFBRTtnQkFDSixLQUFLO2dCQUNMLE1BQU07Z0JBQ04sRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO2FBQ1o7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERhdGFiYXNlIGZyb20gJ0Bpb2M6QWRvbmlzL0x1Y2lkL0RhdGFiYXNlJ1xuaW1wb3J0IHsgdGVzdCB9IGZyb20gJ0BqYXBhL3J1bm5lcidcbmltcG9ydCB7IFVzZXJGYWN0b3J5IH0gZnJvbSAnRGF0YWJhc2UvZmFjdG9yaWVzJ1xuXG4vKlxuICB7XG4gICAgXCJ1c2Vyc1wiOiB7XG4gICAgICBcImVtYWlsXCI6IHN0cmluZyxcbiAgICAgIFwidXNlcm5hbWVcIjogc3RyaW5nLFxuICAgICAgXCJwYXNzd29yZFwiOiBzdHJpbmcsXG4gICAgICBcImF2YXRhclwiOiBzdHJpbmdcbiAgICB9XG4gIH1cbiovXG50ZXN0Lmdyb3VwKCdVc2VyJywgKGdyb3VwKSA9PiB7XG4gIGdyb3VwLmVhY2guc2V0dXAoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IERhdGFiYXNlLmJlZ2luR2xvYmFsVHJhbnNhY3Rpb24oKVxuICAgIHJldHVybiAoKSA9PiBEYXRhYmFzZS5yb2xsYmFja0dsb2JhbFRyYW5zYWN0aW9uKClcbiAgfSlcblxuICB0ZXN0KCdpdCBzaG91bGQgY3JlYXRlIGFuIHVzZXInLCBhc3luYyAoeyBjbGllbnQsIGFzc2VydCB9KSA9PiB7XG4gICAgY29uc3QgdXNlclBheWxvYWQgPSB7XG4gICAgICBlbWFpbDogJ3Rlc3RAdGVzdC5jb20nLFxuICAgICAgdXNlcm5hbWU6ICd0ZXN0JyxcbiAgICAgIHBhc3N3b3JkOiAndGVzdCcsXG4gICAgICBhdmF0YXI6ICdodHRwczovL2ltYWdlcy5jb20vaW1hZ2UvMScsXG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LnBvc3QoJy91c2VycycpLmpzb24odXNlclBheWxvYWQpXG5cbiAgICBjb25zdCB7IHBhc3N3b3JkLCBhdmF0YXIsIC4uLmV4cGVjdGVkIH0gPSB1c2VyUGF5bG9hZFxuXG4gICAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDIwMSlcbiAgICByZXNwb25zZS5hc3NlcnRCb2R5Q29udGFpbnMoeyB1c2VyOiBleHBlY3RlZCB9KVxuICAgIGFzc2VydC5ub3RFeGlzdHMocmVzcG9uc2UuYm9keSgpLnVzZXIucGFzc3dvcmQsICdQYXNzd29yZCBkZWZpbmVkJylcbiAgfSlcblxuICB0ZXN0KCdpdCBzaG91bGQgdXBkYXRlIGFuIHVzZXInLCBhc3luYyAoeyBjbGllbnQsIGFzc2VydCB9KSA9PiB7XG4gICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXJGYWN0b3J5LmNyZWF0ZSgpXG4gICAgY29uc3QgZW1haWwgPSAndGVzdEB0ZXN0LmNvbSdcbiAgICBjb25zdCBhdmF0YXIgPSAnaHR0cHM6Ly9naXRodWIuY29tL2ltYWdlLnBuZydcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50XG4gICAgICAucHV0KGAvdXNlcnMvJHt1c2VyLmlkfWApXG4gICAgICAuanNvbih7XG4gICAgICAgIGVtYWlsLFxuICAgICAgICBhdmF0YXIsXG4gICAgICAgIHBhc3N3b3JkOiB1c2VyLnBhc3N3b3JkLFxuICAgICAgfSlcbiAgICAgIC5sb2dpbkFzKHVzZXIpXG5cbiAgICByZXNwb25zZS5hc3NlcnRTdGF0dXMoMjAwKVxuICAgIHJlc3BvbnNlLmFzc2VydEJvZHlDb250YWlucyh7XG4gICAgICB1c2VyOiB7XG4gICAgICAgIGVtYWlsLFxuICAgICAgICBhdmF0YXIsXG4gICAgICAgIGlkOiB1c2VyLmlkLFxuICAgICAgfSxcbiAgICB9KVxuICB9KVxufSlcbiJdfQ==