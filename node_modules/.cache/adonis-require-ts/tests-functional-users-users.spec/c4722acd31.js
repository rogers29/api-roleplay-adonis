"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const runner_1 = require("@japa/runner");
runner_1.test.group('User', (group) => {
    group.each.setup(async () => {
        await Database_1.default.beginGlobalTransaction();
        return () => Database_1.default.rollbackGlobalTransaction();
    });
    (0, runner_1.test)('it should create an user', async ({ client, assert }) => {
        const userPayload = {
            email: 'test@test.com',
            username: 'test',
            password: 'test',
            avatar: 'https://images.com/image/1',
        };
        const response = await client.post('/users').json(userPayload);
        const { password, avatar, ...expected } = userPayload;
        response.assertStatus(201);
        response.assertBodyContains({ user: expected });
        assert.notExists(response.body().user.password, 'Password defined');
    });
    (0, runner_1.test)('it should create an user 2', async ({ client, assert }) => {
        const userPayload = {
            email: 'test@test.com',
            username: 'test',
            password: 'test',
            avatar: 'https://images.com/image/1',
        };
        const response = await client.post('/users').json(userPayload);
        const { password, avatar, ...expected } = userPayload;
        response.assertStatus(201);
        response.assertBodyContains({ user: expected });
        assert.notExists(response.body().user.password, 'Password defined');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlcnMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVzZXJzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyRkFBaUQ7QUFDakQseUNBQW1DO0FBWW5DLGFBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7SUFDM0IsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDMUIsTUFBTSxrQkFBUSxDQUFDLHNCQUFzQixFQUFFLENBQUE7UUFDdkMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxrQkFBUSxDQUFDLHlCQUF5QixFQUFFLENBQUE7SUFDbkQsQ0FBQyxDQUFDLENBQUE7SUFFRixJQUFBLGFBQUksRUFBQywwQkFBMEIsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtRQUM1RCxNQUFNLFdBQVcsR0FBRztZQUNsQixLQUFLLEVBQUUsZUFBZTtZQUN0QixRQUFRLEVBQUUsTUFBTTtZQUNoQixRQUFRLEVBQUUsTUFBTTtZQUNoQixNQUFNLEVBQUUsNEJBQTRCO1NBQ3JDLENBQUE7UUFDRCxNQUFNLFFBQVEsR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBRTlELE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEdBQUcsUUFBUSxFQUFFLEdBQUcsV0FBVyxDQUFBO1FBRXJELFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDMUIsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUE7UUFDL0MsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQyxDQUFBO0lBQ3JFLENBQUMsQ0FBQyxDQUFBO0lBRUYsSUFBQSxhQUFJLEVBQUMsNEJBQTRCLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUU7UUFDOUQsTUFBTSxXQUFXLEdBQUc7WUFDbEIsS0FBSyxFQUFFLGVBQWU7WUFDdEIsUUFBUSxFQUFFLE1BQU07WUFDaEIsUUFBUSxFQUFFLE1BQU07WUFDaEIsTUFBTSxFQUFFLDRCQUE0QjtTQUNyQyxDQUFBO1FBQ0QsTUFBTSxRQUFRLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUU5RCxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxHQUFHLFFBQVEsRUFBRSxHQUFHLFdBQVcsQ0FBQTtRQUVyRCxRQUFRLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQzFCLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBQy9DLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsa0JBQWtCLENBQUMsQ0FBQTtJQUNyRSxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERhdGFiYXNlIGZyb20gJ0Bpb2M6QWRvbmlzL0x1Y2lkL0RhdGFiYXNlJ1xuaW1wb3J0IHsgdGVzdCB9IGZyb20gJ0BqYXBhL3J1bm5lcidcblxuLypcbiAge1xuICAgIFwidXNlcnNcIjoge1xuICAgICAgXCJlbWFpbFwiOiBzdHJpbmcsXG4gICAgICBcInVzZXJuYW1lXCI6IHN0cmluZyxcbiAgICAgIFwicGFzc3dvcmRcIjogc3RyaW5nLFxuICAgICAgXCJhdmF0YXJcIjogc3RyaW5nXG4gICAgfVxuICB9XG4qL1xudGVzdC5ncm91cCgnVXNlcicsIChncm91cCkgPT4ge1xuICBncm91cC5lYWNoLnNldHVwKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBEYXRhYmFzZS5iZWdpbkdsb2JhbFRyYW5zYWN0aW9uKClcbiAgICByZXR1cm4gKCkgPT4gRGF0YWJhc2Uucm9sbGJhY2tHbG9iYWxUcmFuc2FjdGlvbigpXG4gIH0pXG5cbiAgdGVzdCgnaXQgc2hvdWxkIGNyZWF0ZSBhbiB1c2VyJywgYXN5bmMgKHsgY2xpZW50LCBhc3NlcnQgfSkgPT4ge1xuICAgIGNvbnN0IHVzZXJQYXlsb2FkID0ge1xuICAgICAgZW1haWw6ICd0ZXN0QHRlc3QuY29tJyxcbiAgICAgIHVzZXJuYW1lOiAndGVzdCcsXG4gICAgICBwYXNzd29yZDogJ3Rlc3QnLFxuICAgICAgYXZhdGFyOiAnaHR0cHM6Ly9pbWFnZXMuY29tL2ltYWdlLzEnLFxuICAgIH1cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5wb3N0KCcvdXNlcnMnKS5qc29uKHVzZXJQYXlsb2FkKVxuXG4gICAgY29uc3QgeyBwYXNzd29yZCwgYXZhdGFyLCAuLi5leHBlY3RlZCB9ID0gdXNlclBheWxvYWRcblxuICAgIHJlc3BvbnNlLmFzc2VydFN0YXR1cygyMDEpXG4gICAgcmVzcG9uc2UuYXNzZXJ0Qm9keUNvbnRhaW5zKHsgdXNlcjogZXhwZWN0ZWQgfSlcbiAgICBhc3NlcnQubm90RXhpc3RzKHJlc3BvbnNlLmJvZHkoKS51c2VyLnBhc3N3b3JkLCAnUGFzc3dvcmQgZGVmaW5lZCcpXG4gIH0pXG5cbiAgdGVzdCgnaXQgc2hvdWxkIGNyZWF0ZSBhbiB1c2VyIDInLCBhc3luYyAoeyBjbGllbnQsIGFzc2VydCB9KSA9PiB7XG4gICAgY29uc3QgdXNlclBheWxvYWQgPSB7XG4gICAgICBlbWFpbDogJ3Rlc3RAdGVzdC5jb20nLFxuICAgICAgdXNlcm5hbWU6ICd0ZXN0JyxcbiAgICAgIHBhc3N3b3JkOiAndGVzdCcsXG4gICAgICBhdmF0YXI6ICdodHRwczovL2ltYWdlcy5jb20vaW1hZ2UvMScsXG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LnBvc3QoJy91c2VycycpLmpzb24odXNlclBheWxvYWQpXG5cbiAgICBjb25zdCB7IHBhc3N3b3JkLCBhdmF0YXIsIC4uLmV4cGVjdGVkIH0gPSB1c2VyUGF5bG9hZFxuXG4gICAgcmVzcG9uc2UuYXNzZXJ0U3RhdHVzKDIwMSlcbiAgICByZXNwb25zZS5hc3NlcnRCb2R5Q29udGFpbnMoeyB1c2VyOiBleHBlY3RlZCB9KVxuICAgIGFzc2VydC5ub3RFeGlzdHMocmVzcG9uc2UuYm9keSgpLnVzZXIucGFzc3dvcmQsICdQYXNzd29yZCBkZWZpbmVkJylcbiAgfSlcbn0pXG4iXX0=