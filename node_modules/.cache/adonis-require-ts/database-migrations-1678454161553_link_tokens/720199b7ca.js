"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Schema_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Schema"));
class default_1 extends Schema_1.default {
    constructor() {
        super(...arguments);
        this.tableName = 'link_tokens';
    }
    async up() {
        this.schema.createTable(this.tableName, (table) => {
            table.increments('id').primary();
            table.string('token', 255).notNullable().unique();
            table.integer('user_id').unsigned().references('id').inTable('users').notNullable();
            table.timestamp('created_at', { useTz: true });
            table.timestamp('updated_at', { useTz: true });
        });
    }
    async down() {
        this.schema.dropTable(this.tableName);
    }
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY3ODQ1NDE2MTU1M19saW5rX3Rva2Vucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIjE2Nzg0NTQxNjE1NTNfbGlua190b2tlbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsSUFBSSxlQUFlLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLFVBQVUsR0FBRztJQUNqRSxPQUFPLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUM5RCxDQUFDLENBQUM7QUFDRixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxNQUFNLFFBQVEsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7QUFDdkYsTUFBTSxTQUFVLFNBQVEsUUFBUSxDQUFDLE9BQU87SUFDcEM7UUFDSSxLQUFLLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLGFBQWEsQ0FBQztJQUNuQyxDQUFDO0lBQ0QsS0FBSyxDQUFDLEVBQUU7UUFDSixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDOUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNqQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNsRCxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDcEYsS0FBSyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUMvQyxLQUFLLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNELEtBQUssQ0FBQyxJQUFJO1FBQ04sSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7Q0FDSjtBQUNELE9BQU8sQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBTY2hlbWFfMSA9IF9faW1wb3J0RGVmYXVsdChnbG9iYWxbU3ltYm9sLmZvcignaW9jLnVzZScpXShcIkFkb25pcy9MdWNpZC9TY2hlbWFcIikpO1xuY2xhc3MgZGVmYXVsdF8xIGV4dGVuZHMgU2NoZW1hXzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMudGFibGVOYW1lID0gJ2xpbmtfdG9rZW5zJztcbiAgICB9XG4gICAgYXN5bmMgdXAoKSB7XG4gICAgICAgIHRoaXMuc2NoZW1hLmNyZWF0ZVRhYmxlKHRoaXMudGFibGVOYW1lLCAodGFibGUpID0+IHtcbiAgICAgICAgICAgIHRhYmxlLmluY3JlbWVudHMoJ2lkJykucHJpbWFyeSgpO1xuICAgICAgICAgICAgdGFibGUuc3RyaW5nKCd0b2tlbicsIDI1NSkubm90TnVsbGFibGUoKS51bmlxdWUoKTtcbiAgICAgICAgICAgIHRhYmxlLmludGVnZXIoJ3VzZXJfaWQnKS51bnNpZ25lZCgpLnJlZmVyZW5jZXMoJ2lkJykuaW5UYWJsZSgndXNlcnMnKS5ub3ROdWxsYWJsZSgpO1xuICAgICAgICAgICAgdGFibGUudGltZXN0YW1wKCdjcmVhdGVkX2F0JywgeyB1c2VUejogdHJ1ZSB9KTtcbiAgICAgICAgICAgIHRhYmxlLnRpbWVzdGFtcCgndXBkYXRlZF9hdCcsIHsgdXNlVHo6IHRydWUgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBkb3duKCkge1xuICAgICAgICB0aGlzLnNjaGVtYS5kcm9wVGFibGUodGhpcy50YWJsZU5hbWUpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGRlZmF1bHRfMTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UWTNPRFExTkRFMk1UVTFNMTlzYVc1clgzUnZhMlZ1Y3k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJakUyTnpnME5UUXhOakUxTlROZmJHbHVhMTkwYjJ0bGJuTXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN1FVRkJRU3gxUmtGQmFVUTdRVUZGYWtRc1pVRkJjVUlzVTBGQlVTeG5Ra0ZCVlR0SlFVRjJRenM3VVVGRFdTeGpRVUZUTEVkQlFVY3NZVUZCWVN4RFFVRkJPMGxCYlVKeVF5eERRVUZETzBsQmFrSlJMRXRCUVVzc1EwRkJReXhGUVVGRk8xRkJRMklzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJTeERRVUZETEV0QlFVc3NSVUZCUlN4RlFVRkZPMWxCUTJoRUxFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVUU3V1VGRGFFTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhQUVVGUExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTXNWMEZCVnl4RlFVRkZMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVUU3V1VGRGFrUXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGQk8xbEJTMjVHTEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1dVRkJXU3hGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVFN1dVRkRPVU1zUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4WlFVRlpMRVZCUVVVc1JVRkJSU3hMUVVGTExFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUVR0UlFVTm9SQ3hEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU5LTEVOQlFVTTdTVUZGVFN4TFFVRkxMRU5CUVVNc1NVRkJTVHRSUVVObUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlFUdEpRVU4yUXl4RFFVRkRPME5CUTBZN1FVRndRa1FzTkVKQmIwSkRJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJRUpoYzJWVFkyaGxiV0VnWm5KdmJTQW5RR2x2WXpwQlpHOXVhWE12VEhWamFXUXZVMk5vWlcxaEoxeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCbGVIUmxibVJ6SUVKaGMyVlRZMmhsYldFZ2UxeHVJQ0J3Y205MFpXTjBaV1FnZEdGaWJHVk9ZVzFsSUQwZ0oyeHBibXRmZEc5clpXNXpKMXh1WEc0Z0lIQjFZbXhwWXlCaGMzbHVZeUIxY0NBb0tTQjdYRzRnSUNBZ2RHaHBjeTV6WTJobGJXRXVZM0psWVhSbFZHRmliR1VvZEdocGN5NTBZV0pzWlU1aGJXVXNJQ2gwWVdKc1pTa2dQVDRnZTF4dUlDQWdJQ0FnZEdGaWJHVXVhVzVqY21WdFpXNTBjeWduYVdRbktTNXdjbWx0WVhKNUtDbGNiaUFnSUNBZ0lIUmhZbXhsTG5OMGNtbHVaeWduZEc5clpXNG5MQ0F5TlRVcExtNXZkRTUxYkd4aFlteGxLQ2t1ZFc1cGNYVmxLQ2xjYmlBZ0lDQWdJSFJoWW14bExtbHVkR1ZuWlhJb0ozVnpaWEpmYVdRbktTNTFibk5wWjI1bFpDZ3BMbkpsWm1WeVpXNWpaWE1vSjJsa0p5a3VhVzVVWVdKc1pTZ25kWE5sY25NbktTNXViM1JPZFd4c1lXSnNaU2dwWEc1Y2JpQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDb2dWWE5sY3lCMGFXMWxjM1JoYlhCMGVpQm1iM0lnVUc5emRHZHlaVk5SVENCaGJtUWdSRUZVUlZSSlRVVXlJR1p2Y2lCTlUxTlJURnh1SUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0IwWVdKc1pTNTBhVzFsYzNSaGJYQW9KMk55WldGMFpXUmZZWFFuTENCN0lIVnpaVlI2T2lCMGNuVmxJSDBwWEc0Z0lDQWdJQ0IwWVdKc1pTNTBhVzFsYzNSaGJYQW9KM1Z3WkdGMFpXUmZZWFFuTENCN0lIVnpaVlI2T2lCMGNuVmxJSDBwWEc0Z0lDQWdmU2xjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJoYzNsdVl5QmtiM2R1SUNncElIdGNiaUFnSUNCMGFHbHpMbk5qYUdWdFlTNWtjbTl3VkdGaWJHVW9kR2hwY3k1MFlXSnNaVTVoYldVcFhHNGdJSDFjYm4xY2JpSmRmUT09Il19