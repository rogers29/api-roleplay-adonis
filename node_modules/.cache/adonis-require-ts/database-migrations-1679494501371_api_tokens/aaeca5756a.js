"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Schema_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Schema"));
class default_1 extends Schema_1.default {
    constructor() {
        super(...arguments);
        this.tableName = 'api_tokens';
    }
    async up() {
        this.schema.createTable(this.tableName, (table) => {
            table.increments('id').primary();
            table.integer('user_id').unsigned().references('id').inTable('users').onDelete('CASCADE');
            table.string('name').notNullable();
            table.string('type').notNullable();
            table.string('token', 64).notNullable().unique();
            table.timestamp('expires_at', { useTz: true }).nullable();
            table.timestamp('created_at', { useTz: true }).notNullable();
        });
    }
    async down() {
        this.schema.dropTable(this.tableName);
    }
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY3OTQ5NDUwMTM3MV9hcGlfdG9rZW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiMTY3OTQ5NDUwMTM3MV9hcGlfdG9rZW5zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUNiLElBQUksZUFBZSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxVQUFVLEdBQUc7SUFDakUsT0FBTyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDOUQsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDOUQsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0FBQ3ZGLE1BQU0sU0FBVSxTQUFRLFFBQVEsQ0FBQyxPQUFPO0lBQ3BDO1FBQ0ksS0FBSyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUM7SUFDbEMsQ0FBQztJQUNELEtBQUssQ0FBQyxFQUFFO1FBQ0osSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzlDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDakMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMxRixLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ25DLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbkMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDakQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUMxRCxLQUFLLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2pFLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNELEtBQUssQ0FBQyxJQUFJO1FBQ04sSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7Q0FDSjtBQUNELE9BQU8sQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBTY2hlbWFfMSA9IF9faW1wb3J0RGVmYXVsdChnbG9iYWxbU3ltYm9sLmZvcignaW9jLnVzZScpXShcIkFkb25pcy9MdWNpZC9TY2hlbWFcIikpO1xuY2xhc3MgZGVmYXVsdF8xIGV4dGVuZHMgU2NoZW1hXzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMudGFibGVOYW1lID0gJ2FwaV90b2tlbnMnO1xuICAgIH1cbiAgICBhc3luYyB1cCgpIHtcbiAgICAgICAgdGhpcy5zY2hlbWEuY3JlYXRlVGFibGUodGhpcy50YWJsZU5hbWUsICh0YWJsZSkgPT4ge1xuICAgICAgICAgICAgdGFibGUuaW5jcmVtZW50cygnaWQnKS5wcmltYXJ5KCk7XG4gICAgICAgICAgICB0YWJsZS5pbnRlZ2VyKCd1c2VyX2lkJykudW5zaWduZWQoKS5yZWZlcmVuY2VzKCdpZCcpLmluVGFibGUoJ3VzZXJzJykub25EZWxldGUoJ0NBU0NBREUnKTtcbiAgICAgICAgICAgIHRhYmxlLnN0cmluZygnbmFtZScpLm5vdE51bGxhYmxlKCk7XG4gICAgICAgICAgICB0YWJsZS5zdHJpbmcoJ3R5cGUnKS5ub3ROdWxsYWJsZSgpO1xuICAgICAgICAgICAgdGFibGUuc3RyaW5nKCd0b2tlbicsIDY0KS5ub3ROdWxsYWJsZSgpLnVuaXF1ZSgpO1xuICAgICAgICAgICAgdGFibGUudGltZXN0YW1wKCdleHBpcmVzX2F0JywgeyB1c2VUejogdHJ1ZSB9KS5udWxsYWJsZSgpO1xuICAgICAgICAgICAgdGFibGUudGltZXN0YW1wKCdjcmVhdGVkX2F0JywgeyB1c2VUejogdHJ1ZSB9KS5ub3ROdWxsYWJsZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgZG93bigpIHtcbiAgICAgICAgdGhpcy5zY2hlbWEuZHJvcFRhYmxlKHRoaXMudGFibGVOYW1lKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWZhdWx0XzE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVFkzT1RRNU5EVXdNVE0zTVY5aGNHbGZkRzlyWlc1ekxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTVRZM09UUTVORFV3TVRNM01WOWhjR2xmZEc5clpXNXpMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN08wRkJRVUVzZFVaQlFXbEVPMEZCUldwRUxHVkJRWEZDTEZOQlFWRXNaMEpCUVZVN1NVRkJka003TzFGQlExa3NZMEZCVXl4SFFVRkhMRmxCUVZrc1EwRkJRVHRKUVhGQ2NFTXNRMEZCUXp0SlFXNUNVU3hMUVVGTExFTkJRVU1zUlVGQlJUdFJRVU5pTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVXNRMEZCUXl4TFFVRkxMRVZCUVVVc1JVRkJSVHRaUVVOb1JDeExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZCTzFsQlEyaERMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhSUVVGUkxFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVRTdXVUZEZWtZc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJRVHRaUVVOc1F5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZCTzFsQlEyeERMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZCTzFsQlMyaEVMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zV1VGQldTeEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVRTdXVUZEZWtRc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eFpRVUZaTEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF5eFhRVUZYTEVWQlFVVXNRMEZCUVR0UlFVTTVSQ3hEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU5LTEVOQlFVTTdTVUZGVFN4TFFVRkxMRU5CUVVNc1NVRkJTVHRSUVVObUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlFUdEpRVU4yUXl4RFFVRkRPME5CUTBZN1FVRjBRa1FzTkVKQmMwSkRJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJRUpoYzJWVFkyaGxiV0VnWm5KdmJTQW5RR2x2WXpwQlpHOXVhWE12VEhWamFXUXZVMk5vWlcxaEoxeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCbGVIUmxibVJ6SUVKaGMyVlRZMmhsYldFZ2UxeHVJQ0J3Y205MFpXTjBaV1FnZEdGaWJHVk9ZVzFsSUQwZ0oyRndhVjkwYjJ0bGJuTW5YRzVjYmlBZ2NIVmliR2xqSUdGemVXNWpJSFZ3S0NrZ2UxeHVJQ0FnSUhSb2FYTXVjMk5vWlcxaExtTnlaV0YwWlZSaFlteGxLSFJvYVhNdWRHRmliR1ZPWVcxbExDQW9kR0ZpYkdVcElEMCtJSHRjYmlBZ0lDQWdJSFJoWW14bExtbHVZM0psYldWdWRITW9KMmxrSnlrdWNISnBiV0Z5ZVNncFhHNGdJQ0FnSUNCMFlXSnNaUzVwYm5SbFoyVnlLQ2QxYzJWeVgybGtKeWt1ZFc1emFXZHVaV1FvS1M1eVpXWmxjbVZ1WTJWektDZHBaQ2NwTG1sdVZHRmliR1VvSjNWelpYSnpKeWt1YjI1RVpXeGxkR1VvSjBOQlUwTkJSRVVuS1Z4dUlDQWdJQ0FnZEdGaWJHVXVjM1J5YVc1bktDZHVZVzFsSnlrdWJtOTBUblZzYkdGaWJHVW9LVnh1SUNBZ0lDQWdkR0ZpYkdVdWMzUnlhVzVuS0NkMGVYQmxKeWt1Ym05MFRuVnNiR0ZpYkdVb0tWeHVJQ0FnSUNBZ2RHRmliR1V1YzNSeWFXNW5LQ2QwYjJ0bGJpY3NJRFkwS1M1dWIzUk9kV3hzWVdKc1pTZ3BMblZ1YVhGMVpTZ3BYRzVjYmlBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNvZ1ZYTmxjeUIwYVcxbGMzUmhiWEI2SUdadmNpQlFiM04wWjNKbFUxRk1JR0Z1WkNCRVFWUkZWRWxOUlRJZ1ptOXlJRTFUVTFGTVhHNGdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lIUmhZbXhsTG5ScGJXVnpkR0Z0Y0NnblpYaHdhWEpsYzE5aGRDY3NJSHNnZFhObFZIbzZJSFJ5ZFdVZ2ZTa3ViblZzYkdGaWJHVW9LVnh1SUNBZ0lDQWdkR0ZpYkdVdWRHbHRaWE4wWVcxd0tDZGpjbVZoZEdWa1gyRjBKeXdnZXlCMWMyVlVlam9nZEhKMVpTQjlLUzV1YjNST2RXeHNZV0pzWlNncFhHNGdJQ0FnZlNsY2JpQWdmVnh1WEc0Z0lIQjFZbXhwWXlCaGMzbHVZeUJrYjNkdUtDa2dlMXh1SUNBZ0lIUm9hWE11YzJOb1pXMWhMbVJ5YjNCVVlXSnNaU2gwYUdsekxuUmhZbXhsVG1GdFpTbGNiaUFnZlZ4dWZWeHVJbDE5Il19