"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./../../database/factories/index");
const japa_1 = __importDefault(require("japa"));
const supertest_1 = __importDefault(require("supertest"));
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const Hash_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Hash"));
const BASE_URL = `http://${process.env.HOST}:${process.env.PORT}`;
let token = '';
let user = {};
japa_1.default.group('User', (group) => {
    (0, japa_1.default)('it should create an user', async (assert) => {
        const userPayload = {
            email: 'test@test.com',
            username: 'test',
            password: 'test',
            avatar: 'https://images.com/image/1',
        };
        const { body } = await (0, supertest_1.default)(BASE_URL).post('/users').send(userPayload).expect(201);
        assert.exists(body.user, 'User undefined');
        assert.exists(body.user.id, 'Id undefined');
        assert.equal(body.user.email, userPayload.email);
        assert.equal(body.user.username, userPayload.username);
        assert.notExists(body.user.password, 'Password defined');
    });
    (0, japa_1.default)('it should return 409 when email is already in use', async (assert) => {
        const { email } = await index_1.UserFactory.create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post('/users')
            .send({
            email,
            username: 'test',
            password: 'test',
        }).expect(409);
        assert.include(body.message, 'email');
        assert.equal(body.code, 'BAD_REQUEST');
        assert.equal(body.status, 409);
    });
    (0, japa_1.default)('it should return 409 when username is already in use', async (assert) => {
        const { username } = await index_1.UserFactory.create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post('/users')
            .send({
            email: 'test@test.com',
            username,
            password: 'test',
        }).expect(409);
        assert.include(body.message, 'username');
        assert.equal(body.code, 'BAD_REQUEST');
        assert.equal(body.status, 409);
    });
    (0, japa_1.default)('it should return 422 when required data is not provided', async (assert) => {
        const { body } = await (0, supertest_1.default)(BASE_URL).post('/users').send({}).expect(422);
        assert.equal(body.code, 'BAD_REQUEST');
        assert.equal(body.status, 422);
    });
    (0, japa_1.default)('it should return 422 when providing an invalid email', async (assert) => {
        const { body } = await (0, supertest_1.default)(BASE_URL).post('/users').send({
            email: 'test@',
            username: 'test',
            password: 'test',
        }).expect(422);
        assert.equal(body.code, 'BAD_REQUEST');
        assert.equal(body.status, 422);
    });
    (0, japa_1.default)('it should return 422 when providing an invalid password', async (assert) => {
        const { body } = await (0, supertest_1.default)(BASE_URL).post('/users').send({
            email: 'test@test.com',
            username: 'test',
            password: 'tes',
        }).expect(422);
        assert.equal(body.code, 'BAD_REQUEST');
        assert.equal(body.status, 422);
    });
    (0, japa_1.default)('it should update an user', async (assert) => {
        const email = 'test@test.com';
        const avatar = 'https://github.com/image.png';
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .put(`/users/${user.id}`)
            .set('Authorization', `Bearer ${token}`)
            .send({
            email,
            avatar,
            password: user.password,
        }).expect(200);
        assert.exists(body.user, 'User underfined');
        assert.equal(body.user.email, email);
        assert.equal(body.user.avatar, avatar);
        assert.equal(body.user.id, user.id);
    });
    (0, japa_1.default)('it should update the password of the user', async (assert) => {
        const password = 'test';
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .put(`/users/${user.id}`)
            .set('Authorization', `Bearer ${token}`)
            .send({
            email: user.email,
            avatar: user.avatar,
            password,
        }).expect(200);
        assert.exists(body.user, 'User underfined');
        assert.equal(body.user.id, user.id);
        await user.refresh();
        assert.isTrue(await Hash_1.default.verify(user.password, password));
    });
    (0, japa_1.default)('it should return 422 wnhe required data is not provided', async (assert) => {
        const { id } = await index_1.UserFactory.create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .put(`/users/${id}`)
            .set('Authorization', `Bearer ${token}`)
            .send({})
            .expect(422);
        assert.equal(body.code, 'BAD_REQUEST');
        assert.equal(body.status, 422);
    });
    (0, japa_1.default)('it should return 422 when provinding an invalid email', async (assert) => {
        const { id, password, avatar } = await index_1.UserFactory.create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .put(`/users/${id}`)
            .set('Authorization', `Bearer ${token}`)
            .send({
            password,
            avatar,
            email: 'test@',
        }).expect(422);
        assert.equal(body.code, 'BAD_REQUEST');
        assert.equal(body.status, 422);
    });
    (0, japa_1.default)('it should return 422 when provinding an invalid password', async (assert) => {
        const { id, email, avatar } = await index_1.UserFactory.create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .put(`/users/${id}`)
            .set('Authorization', `Bearer ${token}`)
            .send({
            password: 'tes',
            avatar,
            email,
        }).expect(422);
        assert.equal(body.code, 'BAD_REQUEST');
        assert.equal(body.status, 422);
    });
    (0, japa_1.default)('it should return 422 when provinding an invalid avatar', async (assert) => {
        const { id, password, email } = await index_1.UserFactory.create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .put(`/users/${id}`)
            .set('Authorization', `Bearer ${token}`)
            .send({
            password,
            avatar: 'teste',
            email,
        }).expect(422);
        assert.equal(body.code, 'BAD_REQUEST');
        assert.equal(body.status, 422);
    });
    group.before(async () => {
        const plainPassword = 'test';
        const newUser = await index_1.UserFactory.merge({ password: plainPassword }).create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post('/sessions')
            .send({ email: newUser.email, password: plainPassword })
            .expect(201);
        token = body.token.token;
        user = newUser;
    });
    group.after(async () => {
        await (0, supertest_1.default)(BASE_URL)
            .delete('/sessions')
            .set('Authorization', `Bearer ${token}`);
    });
    group.beforeEach(async () => {
        await Database_1.default.beginGlobalTransaction();
    });
    group.afterEach(async () => {
        await Database_1.default.rollbackGlobalTransaction();
    });
});
//# sourceMappingURL=data:application/json;base64,