"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Mail_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Addons/Mail"));
const TokenExpiredException_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Exceptions/TokenExpiredException"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const ForgotPasswordValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/ForgotPasswordValidator"));
const ResetPasswordValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/ResetPasswordValidator"));
const crypto_1 = require("crypto");
const util_1 = require("util");
class PasswordsController {
    async forgotPassword({ request, response }) {
        const { email, resetPasswordUrl } = await request.validate(ForgotPasswordValidator_1.default);
        const user = await User_1.default.findByOrFail('email', email);
        const random = await (0, util_1.promisify)(crypto_1.randomBytes)(24);
        const token = random.toString('hex');
        await user.related('tokens').updateOrCreate({ userId: user.id }, {
            token,
        });
        const resetPasswordUrlWithToken = `${resetPasswordUrl}?token=${token}`;
        await Mail_1.default.send((message) => {
            message
                .from('no-reply@roleplay.com')
                .to(email)
                .subject('Roleplay: recuperação de Senha')
                .htmlView('email/forgotpassword', {
                productName: 'Roleplay',
                name: user.username,
                resetPasswordUrl: resetPasswordUrlWithToken,
            });
        });
        return response.noContent();
    }
    async resetPassword({ request, response }) {
        const { token, password } = await request.validate(ResetPasswordValidator_1.default);
        const userByToken = await User_1.default.query()
            .whereHas('tokens', (query) => {
            query.where('token', token);
        })
            .preload('tokens')
            .firstOrFail();
        const tokenAge = Math.abs(userByToken.tokens[0].createdAt.diffNow('hours').hours);
        if (tokenAge > 2) {
            throw new TokenExpiredException_1.default();
        }
        userByToken.password = password;
        await userByToken.save();
        await userByToken.tokens[0].delete();
        return response.noContent();
    }
}
exports.default = PasswordsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFzc3dvcmRzQ29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlBhc3N3b3Jkc0NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxvRkFBMEM7QUFFMUMsdUhBQStEO0FBQy9ELGlGQUFrQztBQUNsQywySEFBbUU7QUFDbkUseUhBQWlFO0FBQ2pFLG1DQUFvQztBQUNwQywrQkFBZ0M7QUFFaEMsTUFBcUIsbUJBQW1CO0lBQy9CLEtBQUssQ0FBQyxjQUFjLENBQUUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUF3QjtRQUN0RSxNQUFNLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLEdBQUcsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDLGlDQUFjLENBQUMsQ0FBQTtRQUMxRSxNQUFNLElBQUksR0FBRyxNQUFNLGNBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBRXBELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSxnQkFBUyxFQUFDLG9CQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUMvQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRXBDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxjQUFjLENBQ3pDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFDbkI7WUFDRSxLQUFLO1NBQ04sQ0FDRixDQUFBO1FBRUQsTUFBTSx5QkFBeUIsR0FBRyxHQUFHLGdCQUFnQixVQUFVLEtBQUssRUFBRSxDQUFBO1FBRXRFLE1BQU0sY0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzFCLE9BQU87aUJBQ0osSUFBSSxDQUFDLHVCQUF1QixDQUFDO2lCQUM3QixFQUFFLENBQUMsS0FBSyxDQUFDO2lCQUNULE9BQU8sQ0FBQyxnQ0FBZ0MsQ0FBQztpQkFDekMsUUFBUSxDQUFDLHNCQUFzQixFQUFFO2dCQUNoQyxXQUFXLEVBQUUsVUFBVTtnQkFDdkIsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRO2dCQUNuQixnQkFBZ0IsRUFBRSx5QkFBeUI7YUFDNUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQyxDQUFDLENBQUE7UUFFRixPQUFPLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQTtJQUM3QixDQUFDO0lBRU0sS0FBSyxDQUFDLGFBQWEsQ0FBRSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQXVCO1FBQ3BFLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDLGdDQUFhLENBQUMsQ0FBQTtRQUVqRSxNQUFNLFdBQVcsR0FBRyxNQUFNLGNBQUksQ0FBQyxLQUFLLEVBQUU7YUFDbkMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzVCLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQzdCLENBQUMsQ0FBQzthQUNELE9BQU8sQ0FBQyxRQUFRLENBQUM7YUFDakIsV0FBVyxFQUFFLENBQUE7UUFFaEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDakYsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFO1lBQ2hCLE1BQU0sSUFBSSwrQkFBWSxFQUFFLENBQUE7U0FDekI7UUFFRCxXQUFXLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQTtRQUMvQixNQUFNLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUN4QixNQUFNLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7UUFFcEMsT0FBTyxRQUFRLENBQUMsU0FBUyxFQUFFLENBQUE7SUFDN0IsQ0FBQztDQUNGO0FBckRELHNDQXFEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYWlsIGZyb20gJ0Bpb2M6QWRvbmlzL0FkZG9ucy9NYWlsJ1xuaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcbmltcG9ydCBUb2tlbkV4cGlyZWQgZnJvbSAnQXBwL0V4Y2VwdGlvbnMvVG9rZW5FeHBpcmVkRXhjZXB0aW9uJ1xuaW1wb3J0IFVzZXIgZnJvbSAnQXBwL01vZGVscy9Vc2VyJ1xuaW1wb3J0IEZvcmdvdFBhc3N3b3JkIGZyb20gJ0FwcC9WYWxpZGF0b3JzL0ZvcmdvdFBhc3N3b3JkVmFsaWRhdG9yJ1xuaW1wb3J0IFJlc2V0UGFzc3dvcmQgZnJvbSAnQXBwL1ZhbGlkYXRvcnMvUmVzZXRQYXNzd29yZFZhbGlkYXRvcidcbmltcG9ydCB7IHJhbmRvbUJ5dGVzIH0gZnJvbSAnY3J5cHRvJ1xuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSAndXRpbCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFzc3dvcmRzQ29udHJvbGxlciB7XG4gIHB1YmxpYyBhc3luYyBmb3Jnb3RQYXNzd29yZCAoeyByZXF1ZXN0LCByZXNwb25zZSB9IDogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IHsgZW1haWwsIHJlc2V0UGFzc3dvcmRVcmwgfSA9IGF3YWl0IHJlcXVlc3QudmFsaWRhdGUoRm9yZ290UGFzc3dvcmQpXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5T3JGYWlsKCdlbWFpbCcsIGVtYWlsKVxuXG4gICAgY29uc3QgcmFuZG9tID0gYXdhaXQgcHJvbWlzaWZ5KHJhbmRvbUJ5dGVzKSgyNClcbiAgICBjb25zdCB0b2tlbiA9IHJhbmRvbS50b1N0cmluZygnaGV4JylcblxuICAgIGF3YWl0IHVzZXIucmVsYXRlZCgndG9rZW5zJykudXBkYXRlT3JDcmVhdGUoXG4gICAgICB7IHVzZXJJZDogdXNlci5pZCB9LFxuICAgICAge1xuICAgICAgICB0b2tlbixcbiAgICAgIH1cbiAgICApXG5cbiAgICBjb25zdCByZXNldFBhc3N3b3JkVXJsV2l0aFRva2VuID0gYCR7cmVzZXRQYXNzd29yZFVybH0/dG9rZW49JHt0b2tlbn1gXG5cbiAgICBhd2FpdCBNYWlsLnNlbmQoKG1lc3NhZ2UpID0+IHtcbiAgICAgIG1lc3NhZ2VcbiAgICAgICAgLmZyb20oJ25vLXJlcGx5QHJvbGVwbGF5LmNvbScpXG4gICAgICAgIC50byhlbWFpbClcbiAgICAgICAgLnN1YmplY3QoJ1JvbGVwbGF5OiByZWN1cGVyYcOnw6NvIGRlIFNlbmhhJylcbiAgICAgICAgLmh0bWxWaWV3KCdlbWFpbC9mb3Jnb3RwYXNzd29yZCcsIHtcbiAgICAgICAgICBwcm9kdWN0TmFtZTogJ1JvbGVwbGF5JyxcbiAgICAgICAgICBuYW1lOiB1c2VyLnVzZXJuYW1lLFxuICAgICAgICAgIHJlc2V0UGFzc3dvcmRVcmw6IHJlc2V0UGFzc3dvcmRVcmxXaXRoVG9rZW4sXG4gICAgICAgIH0pXG4gICAgfSlcblxuICAgIHJldHVybiByZXNwb25zZS5ub0NvbnRlbnQoKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHJlc2V0UGFzc3dvcmQgKHsgcmVxdWVzdCwgcmVzcG9uc2UgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IHsgdG9rZW4sIHBhc3N3b3JkIH0gPSBhd2FpdCByZXF1ZXN0LnZhbGlkYXRlKFJlc2V0UGFzc3dvcmQpXG5cbiAgICBjb25zdCB1c2VyQnlUb2tlbiA9IGF3YWl0IFVzZXIucXVlcnkoKVxuICAgICAgLndoZXJlSGFzKCd0b2tlbnMnLCAocXVlcnkpID0+IHtcbiAgICAgICAgcXVlcnkud2hlcmUoJ3Rva2VuJywgdG9rZW4pXG4gICAgICB9KVxuICAgICAgLnByZWxvYWQoJ3Rva2VucycpIC8vIE11ZGEgbyBjYXJyZWdhbWVudG8gdHJhemVuZG8gb3MgZGFkb3MgZG8gcmVsYWNpb25hbWVudG8gZGUgZm9ybWEgZXhwbGljaXRhXG4gICAgICAuZmlyc3RPckZhaWwoKVxuXG4gICAgY29uc3QgdG9rZW5BZ2UgPSBNYXRoLmFicyh1c2VyQnlUb2tlbi50b2tlbnNbMF0uY3JlYXRlZEF0LmRpZmZOb3coJ2hvdXJzJykuaG91cnMpXG4gICAgaWYgKHRva2VuQWdlID4gMikge1xuICAgICAgdGhyb3cgbmV3IFRva2VuRXhwaXJlZCgpXG4gICAgfVxuXG4gICAgdXNlckJ5VG9rZW4ucGFzc3dvcmQgPSBwYXNzd29yZFxuICAgIGF3YWl0IHVzZXJCeVRva2VuLnNhdmUoKVxuICAgIGF3YWl0IHVzZXJCeVRva2VuLnRva2Vuc1swXS5kZWxldGUoKVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlLm5vQ29udGVudCgpXG4gIH1cbn1cbiJdfQ==