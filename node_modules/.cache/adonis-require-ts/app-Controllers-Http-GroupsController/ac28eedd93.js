"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BadRequestException_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Exceptions/BadRequestException"));
const Group_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Group"));
const CreateGroupValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/CreateGroupValidator"));
class GroupsController {
    async index({ request, response }) {
        const { text, ['user']: userId } = request.qs();
        const page = request.input('page', 1);
        const limit = request.input('limit', 5);
        const groupsQuery = this.filterByQueryString(userId, text);
        const groups = await groupsQuery.paginate(page, limit);
        return response.ok({ groups });
    }
    async store({ request, response }) {
        const groupPayload = await request.validate(CreateGroupValidator_1.default);
        const group = await Group_1.default.create(groupPayload);
        await group.related('players').attach([groupPayload.master]);
        await group.load('players');
        return response.created({ group });
    }
    async update({ request, response, bouncer }) {
        const id = request.param('id');
        const payload = request.all();
        const group = await Group_1.default.findOrFail(id);
        await bouncer.authorize('updateGroup', group);
        const updatedGroup = await group.merge(payload).save();
        return response.ok({ group: updatedGroup });
    }
    async removePlayer({ request, response }) {
        const groupId = request.param('groupId');
        const playerId = +request.param('playerId');
        const group = await Group_1.default.findOrFail(groupId);
        if (playerId === group.master) {
            throw new BadRequestException_1.default('cannot remove master from group', 400);
        }
        await group.related('players').detach([playerId]);
        return response.ok({});
    }
    async destroy({ request, response, bouncer }) {
        const id = request.param('id');
        const group = await Group_1.default.findOrFail(id);
        await bouncer.authorize('deleteGroup', group);
        await group.delete();
        return response.ok({});
    }
    filterByQueryString(userId, text) {
        if (userId && text) {
            return this.filterByUserAndText(userId, text);
        }
        else if (userId) {
            return this.filterByUser(userId);
        }
        else if (text) {
            return this.filterByText(text);
        }
        else {
            return this.all();
        }
    }
    all() {
        return Group_1.default.query().preload('players').preload('masterUser');
    }
    filterByUser(userId) {
        return Group_1.default.query()
            .preload('players')
            .preload('masterUser')
            .withScopes((scope) => scope.withPlayer(userId));
    }
    filterByText(text) {
        return Group_1.default.query()
            .preload('players')
            .preload('masterUser')
            .withScopes((scope) => scope.withText(text));
    }
    filterByUserAndText(userId, text) {
        return Group_1.default.query()
            .preload('players')
            .preload('masterUser')
            .withScopes((scope) => scope.withPlayer(userId))
            .withScopes((scope) => scope.withText(text));
    }
}
exports.default = GroupsController;
//# sourceMappingURL=data:application/json;base64,