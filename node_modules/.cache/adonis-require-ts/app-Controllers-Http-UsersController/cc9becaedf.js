"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BadRequestException_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Exceptions/BadRequestException"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
const CreateUserValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/CreateUserValidator"));
const UpdateUserValidator_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Validators/UpdateUserValidator"));
class UsersController {
    async store({ request, response }) {
        const userPayload = await request.validate(CreateUserValidator_1.default);
        const userByEmail = await User_1.default.findBy('email', userPayload.email);
        if (userByEmail) {
            throw new BadRequestException_1.default('email already in use', 409);
        }
        const userByUsername = await User_1.default.findBy('username', userPayload.username);
        if (userByUsername) {
            throw new BadRequestException_1.default('username already in use', 409);
        }
        const user = await User_1.default.create(userPayload);
        return response.created({ user });
    }
    async update({ request, response, bouncer }) {
        const { email, password, avatar } = await request.validate(UpdateUserValidator_1.default);
        const id = request.param('id');
        const user = await User_1.default.findOrFail(id);
        await bouncer.authorize('updateUser', user);
        user.email = email;
        user.password = password;
        if (avatar) {
            user.avatar = avatar;
        }
        await user.save();
        return response.ok({ user });
    }
}
exports.default = UsersController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlcnNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVXNlcnNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsbUhBQTJEO0FBQzNELGlGQUFrQztBQUNsQyxtSEFBMkQ7QUFDM0QsbUhBQTJEO0FBRTNELE1BQXFCLGVBQWU7SUFDM0IsS0FBSyxDQUFDLEtBQUssQ0FBRSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQXVCO1FBQzVELE1BQU0sV0FBVyxHQUFHLE1BQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQyw2QkFBVSxDQUFDLENBQUE7UUFFdEQsTUFBTSxXQUFXLEdBQUcsTUFBTSxjQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDakUsSUFBSSxXQUFXLEVBQUU7WUFDZixNQUFNLElBQUksNkJBQVUsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLENBQUMsQ0FBQTtTQUNsRDtRQUVELE1BQU0sY0FBYyxHQUFHLE1BQU0sY0FBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQzFFLElBQUksY0FBYyxFQUFFO1lBQ2xCLE1BQU0sSUFBSSw2QkFBVSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsQ0FBQyxDQUFBO1NBQ3JEO1FBRUQsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQzNDLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFDbkMsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUUsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBdUI7UUFDdEUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEdBQUcsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDLDZCQUFVLENBQUMsQ0FBQTtRQUN0RSxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzlCLE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUV0QyxNQUFNLE9BQU8sQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBRTNDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO1FBQ2xCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO1FBRXhCLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7U0FDckI7UUFFRCxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUVqQixPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBQzlCLENBQUM7Q0FDRjtBQXBDRCxrQ0FvQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IEJhZFJlcXVlc3QgZnJvbSAnQXBwL0V4Y2VwdGlvbnMvQmFkUmVxdWVzdEV4Y2VwdGlvbidcbmltcG9ydCBVc2VyIGZyb20gJ0FwcC9Nb2RlbHMvVXNlcidcbmltcG9ydCBDcmVhdGVVc2VyIGZyb20gJ0FwcC9WYWxpZGF0b3JzL0NyZWF0ZVVzZXJWYWxpZGF0b3InXG5pbXBvcnQgVXBkYXRlVXNlciBmcm9tICdBcHAvVmFsaWRhdG9ycy9VcGRhdGVVc2VyVmFsaWRhdG9yJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2Vyc0NvbnRyb2xsZXIge1xuICBwdWJsaWMgYXN5bmMgc3RvcmUgKHsgcmVxdWVzdCwgcmVzcG9uc2UgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IHVzZXJQYXlsb2FkID0gYXdhaXQgcmVxdWVzdC52YWxpZGF0ZShDcmVhdGVVc2VyKVxuXG4gICAgY29uc3QgdXNlckJ5RW1haWwgPSBhd2FpdCBVc2VyLmZpbmRCeSgnZW1haWwnLCB1c2VyUGF5bG9hZC5lbWFpbClcbiAgICBpZiAodXNlckJ5RW1haWwpIHtcbiAgICAgIHRocm93IG5ldyBCYWRSZXF1ZXN0KCdlbWFpbCBhbHJlYWR5IGluIHVzZScsIDQwOSlcbiAgICB9XG5cbiAgICBjb25zdCB1c2VyQnlVc2VybmFtZSA9IGF3YWl0IFVzZXIuZmluZEJ5KCd1c2VybmFtZScsIHVzZXJQYXlsb2FkLnVzZXJuYW1lKVxuICAgIGlmICh1c2VyQnlVc2VybmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEJhZFJlcXVlc3QoJ3VzZXJuYW1lIGFscmVhZHkgaW4gdXNlJywgNDA5KVxuICAgIH1cblxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmNyZWF0ZSh1c2VyUGF5bG9hZClcbiAgICByZXR1cm4gcmVzcG9uc2UuY3JlYXRlZCh7IHVzZXIgfSlcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB1cGRhdGUgKHsgcmVxdWVzdCwgcmVzcG9uc2UsIGJvdW5jZXIgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIGNvbnN0IHsgZW1haWwsIHBhc3N3b3JkLCBhdmF0YXIgfSA9IGF3YWl0IHJlcXVlc3QudmFsaWRhdGUoVXBkYXRlVXNlcilcbiAgICBjb25zdCBpZCA9IHJlcXVlc3QucGFyYW0oJ2lkJylcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kT3JGYWlsKGlkKVxuXG4gICAgYXdhaXQgYm91bmNlci5hdXRob3JpemUoJ3VwZGF0ZVVzZXInLCB1c2VyKVxuXG4gICAgdXNlci5lbWFpbCA9IGVtYWlsXG4gICAgdXNlci5wYXNzd29yZCA9IHBhc3N3b3JkXG5cbiAgICBpZiAoYXZhdGFyKSB7XG4gICAgICB1c2VyLmF2YXRhciA9IGF2YXRhclxuICAgIH1cblxuICAgIGF3YWl0IHVzZXIuc2F2ZSgpXG5cbiAgICByZXR1cm4gcmVzcG9uc2Uub2soeyB1c2VyIH0pXG4gIH1cbn1cbiJdfQ==