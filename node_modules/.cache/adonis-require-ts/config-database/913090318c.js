"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Application_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Application"));
const Env_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Env"));
const databaseConfig = {
    connection: Env_1.default.get('DB_CONNECTION'),
    connections: {
        mysql: {
            client: 'mysql2',
            connection: {
                host: Env_1.default.get('MYSQL_HOST'),
                port: Env_1.default.get('MYSQL_PORT'),
                user: Env_1.default.get('MYSQL_USER'),
                password: Env_1.default.get('MYSQL_PASSWORD', ''),
                database: Env_1.default.get('MYSQL_DB_NAME'),
            },
            migrations: {
                naturalSort: true,
            },
            healthCheck: false,
            debug: false,
        },
        sqlite: {
            client: 'sqlite',
            connection: {
                filename: Application_1.default.tmpPath('db.sqlite3'),
            },
            pool: {
                afterCreate: function (conn, cb) {
                    conn.run('PRAGMA foreign_keys=true', cb);
                },
            },
            migrations: {
                naturalSort: true,
            },
            useNullAsDefault: true,
            healthCheck: false,
            debug: false,
        },
    }
};
exports.default = databaseConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXRhYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQU9BLGdHQUFzRDtBQUN0RCxnRkFBc0M7QUFHdEMsTUFBTSxjQUFjLEdBQW1CO0lBV3JDLFVBQVUsRUFBRSxhQUFHLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQztJQUVwQyxXQUFXLEVBQUU7UUFZWCxLQUFLLEVBQUU7WUFDTCxNQUFNLEVBQUUsUUFBUTtZQUNoQixVQUFVLEVBQUU7Z0JBQ1YsSUFBSSxFQUFFLGFBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDO2dCQUMzQixJQUFJLEVBQUUsYUFBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUM7Z0JBQzNCLElBQUksRUFBRSxhQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQztnQkFDM0IsUUFBUSxFQUFFLGFBQUcsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDO2dCQUN2QyxRQUFRLEVBQUUsYUFBRyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUM7YUFDbkM7WUFDRCxVQUFVLEVBQUU7Z0JBQ1YsV0FBVyxFQUFFLElBQUk7YUFDbEI7WUFDRCxXQUFXLEVBQUUsS0FBSztZQUNsQixLQUFLLEVBQUUsS0FBSztTQUNiO1FBRUQsTUFBTSxFQUFFO1lBQ04sTUFBTSxFQUFFLFFBQVE7WUFDaEIsVUFBVSxFQUFFO2dCQUNWLFFBQVEsRUFBRSxxQkFBVyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7YUFDNUM7WUFDRCxJQUFJLEVBQUU7Z0JBQ0osV0FBVyxFQUFFLFVBQVUsSUFBSSxFQUFFLEVBQUU7b0JBQzdCLElBQUksQ0FBQyxHQUFHLENBQUMsMEJBQTBCLEVBQUUsRUFBRSxDQUFDLENBQUE7Z0JBQzFDLENBQUM7YUFDRjtZQUNELFVBQVUsRUFBRTtnQkFDVixXQUFXLEVBQUUsSUFBSTthQUNsQjtZQUNELGdCQUFnQixFQUFFLElBQUk7WUFDdEIsV0FBVyxFQUFFLEtBQUs7WUFDbEIsS0FBSyxFQUFFLEtBQUs7U0FDYjtLQUNGO0NBQ0YsQ0FBQTtBQUVELGtCQUFlLGNBQWMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBDb25maWcgc291cmNlOiBodHRwczovL2dpdC5pby9KZXNWOVxuICpcbiAqIEZlZWwgZnJlZSB0byBsZXQgdXMga25vdyB2aWEgUFIsIGlmIHlvdSBmaW5kIHNvbWV0aGluZyBicm9rZW4gaW4gdGhpcyBjb25maWdcbiAqIGZpbGUuXG4gKi9cbmltcG9ydCBBcHBsaWNhdGlvbiBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0FwcGxpY2F0aW9uJ1xuaW1wb3J0IEVudiBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0VudidcbmltcG9ydCB7IERhdGFiYXNlQ29uZmlnIH0gZnJvbSAnQGlvYzpBZG9uaXMvTHVjaWQvRGF0YWJhc2UnXG5cbmNvbnN0IGRhdGFiYXNlQ29uZmlnOiBEYXRhYmFzZUNvbmZpZyA9IHtcbiAgLypcbiAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHwgQ29ubmVjdGlvblxuICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgfFxuICB8IFRoZSBwcmltYXJ5IGNvbm5lY3Rpb24gZm9yIG1ha2luZyBkYXRhYmFzZSBxdWVyaWVzIGFjcm9zcyB0aGUgYXBwbGljYXRpb25cbiAgfCBZb3UgY2FuIHVzZSBhbnkga2V5IGZyb20gdGhlIGBjb25uZWN0aW9uc2Agb2JqZWN0IGRlZmluZWQgaW4gdGhpcyBzYW1lXG4gIHwgZmlsZS5cbiAgfFxuICAqL1xuICBjb25uZWN0aW9uOiBFbnYuZ2V0KCdEQl9DT05ORUNUSU9OJyksXG5cbiAgY29ubmVjdGlvbnM6IHtcbiAgICAvKlxuICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHwgTXlTUUwgY29uZmlnXG4gICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgfFxuICAgIHwgQ29uZmlndXJhdGlvbiBmb3IgTXlTUUwgZGF0YWJhc2UuIE1ha2Ugc3VyZSB0byBpbnN0YWxsIHRoZSBkcml2ZXJcbiAgICB8IGZyb20gbnBtIHdoZW4gdXNpbmcgdGhpcyBjb25uZWN0aW9uXG4gICAgfFxuICAgIHwgbnBtIGkgbXlzcWwyXG4gICAgfFxuICAgICovXG4gICAgbXlzcWw6IHtcbiAgICAgIGNsaWVudDogJ215c3FsMicsXG4gICAgICBjb25uZWN0aW9uOiB7XG4gICAgICAgIGhvc3Q6IEVudi5nZXQoJ01ZU1FMX0hPU1QnKSxcbiAgICAgICAgcG9ydDogRW52LmdldCgnTVlTUUxfUE9SVCcpLFxuICAgICAgICB1c2VyOiBFbnYuZ2V0KCdNWVNRTF9VU0VSJyksXG4gICAgICAgIHBhc3N3b3JkOiBFbnYuZ2V0KCdNWVNRTF9QQVNTV09SRCcsICcnKSxcbiAgICAgICAgZGF0YWJhc2U6IEVudi5nZXQoJ01ZU1FMX0RCX05BTUUnKSxcbiAgICAgIH0sXG4gICAgICBtaWdyYXRpb25zOiB7XG4gICAgICAgIG5hdHVyYWxTb3J0OiB0cnVlLFxuICAgICAgfSxcbiAgICAgIGhlYWx0aENoZWNrOiBmYWxzZSxcbiAgICAgIGRlYnVnOiBmYWxzZSxcbiAgICB9LFxuXG4gICAgc3FsaXRlOiB7XG4gICAgICBjbGllbnQ6ICdzcWxpdGUnLFxuICAgICAgY29ubmVjdGlvbjoge1xuICAgICAgICBmaWxlbmFtZTogQXBwbGljYXRpb24udG1wUGF0aCgnZGIuc3FsaXRlMycpLFxuICAgICAgfSxcbiAgICAgIHBvb2w6IHtcbiAgICAgICAgYWZ0ZXJDcmVhdGU6IGZ1bmN0aW9uIChjb25uLCBjYikge1xuICAgICAgICAgIGNvbm4ucnVuKCdQUkFHTUEgZm9yZWlnbl9rZXlzPXRydWUnLCBjYilcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBtaWdyYXRpb25zOiB7XG4gICAgICAgIG5hdHVyYWxTb3J0OiB0cnVlLFxuICAgICAgfSxcbiAgICAgIHVzZU51bGxBc0RlZmF1bHQ6IHRydWUsXG4gICAgICBoZWFsdGhDaGVjazogZmFsc2UsXG4gICAgICBkZWJ1ZzogZmFsc2UsXG4gICAgfSxcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBkYXRhYmFzZUNvbmZpZ1xuIl19