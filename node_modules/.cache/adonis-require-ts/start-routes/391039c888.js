"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Route_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Route"));
Route_1.default.get('/', async () => {
    return { hello: 'world' };
});
Route_1.default.post('/users', 'UsersController.store');
Route_1.default.put('/users/:id', 'UsersController.update').middleware('auth');
Route_1.default.post('/forgot-password', 'PasswordsController.forgotPassword');
Route_1.default.post('/reset-password', 'PasswordsController.resetPassword');
Route_1.default.post('/sessions', 'SessionsController.store');
Route_1.default.delete('/sessions', 'SessionsController.destroy');
Route_1.default.get('/groups', 'GroupsController.index').middleware('auth');
Route_1.default.post('/groups', 'GroupsController.store').middleware('auth');
Route_1.default.delete('/groups/:id', 'GroupsController.destroy').middleware('auth');
Route_1.default.patch('/groups/:id', 'GroupsController.update').middleware('auth');
Route_1.default.delete('/groups/:groupId/players/:playerId', 'GroupsController.removePlayer').middleware('auth');
Route_1.default.get('/groups/:groupId/requests', 'GroupRequestsController.index').middleware('auth');
Route_1.default.post('/groups/:groupId/requests', 'GroupRequestsController.store').middleware('auth');
Route_1.default.post('/groups/:groupId/requests/:requestId/accept', 'GroupRequestsController.accept').middleware('auth');
Route_1.default.delete('/groups/:groupId/requests/:requestId', 'GroupRequestsController.destroy').middleware('auth');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBb0JBLG9GQUEwQztBQUUxQyxlQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLElBQUksRUFBRTtJQUN4QixPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFBO0FBQzNCLENBQUMsQ0FBQyxDQUFBO0FBRUYsZUFBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsdUJBQXVCLENBQUMsQ0FBQTtBQUM3QyxlQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSx3QkFBd0IsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUVwRSxlQUFLLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLG9DQUFvQyxDQUFDLENBQUE7QUFDcEUsZUFBSyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxtQ0FBbUMsQ0FBQyxDQUFBO0FBRWxFLGVBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLDBCQUEwQixDQUFDLENBQUE7QUFDbkQsZUFBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsNEJBQTRCLENBQUMsQ0FBQTtBQUV2RCxlQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUNqRSxlQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUNsRSxlQUFLLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUMxRSxlQUFLLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUN4RSxlQUFLLENBQUMsTUFBTSxDQUFDLG9DQUFvQyxFQUFFLCtCQUErQixDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBRXRHLGVBQUssQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEVBQUUsK0JBQStCLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDMUYsZUFBSyxDQUFDLElBQUksQ0FBQywyQkFBMkIsRUFBRSwrQkFBK0IsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUMzRixlQUFLLENBQUMsSUFBSSxDQUFDLDZDQUE2QyxFQUFFLGdDQUFnQyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQzlHLGVBQUssQ0FBQyxNQUFNLENBQUMsc0NBQXNDLEVBQUUsaUNBQWlDLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58IFJvdXRlc1xufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58XG58IFRoaXMgZmlsZSBpcyBkZWRpY2F0ZWQgZm9yIGRlZmluaW5nIEhUVFAgcm91dGVzLiBBIHNpbmdsZSBmaWxlIGlzIGVub3VnaFxufCBmb3IgbWFqb3JpdHkgb2YgcHJvamVjdHMsIGhvd2V2ZXIgeW91IGNhbiBkZWZpbmUgcm91dGVzIGluIGRpZmZlcmVudFxufCBmaWxlcyBhbmQganVzdCBtYWtlIHN1cmUgdG8gaW1wb3J0IHRoZW0gaW5zaWRlIHRoaXMgZmlsZS4gRm9yIGV4YW1wbGVcbnxcbnwgRGVmaW5lIHJvdXRlcyBpbiBmb2xsb3dpbmcgdHdvIGZpbGVzXG58IOKUnOKUgOKUgCBzdGFydC9yb3V0ZXMvY2FydC50c1xufCDilJzilIDilIAgc3RhcnQvcm91dGVzL2N1c3RvbWVyLnRzXG58XG58IGFuZCB0aGVuIGltcG9ydCB0aGVtIGluc2lkZSBgc3RhcnQvcm91dGVzLnRzYCBhcyBmb2xsb3dzXG58XG58IGltcG9ydCAnLi9yb3V0ZXMvY2FydCdcbnwgaW1wb3J0ICcuL3JvdXRlcy9jdXN0b21lcidcbnxcbiovXG5cbmltcG9ydCBSb3V0ZSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL1JvdXRlJ1xuXG5Sb3V0ZS5nZXQoJy8nLCBhc3luYyAoKSA9PiB7XG4gIHJldHVybiB7IGhlbGxvOiAnd29ybGQnIH1cbn0pXG5cblJvdXRlLnBvc3QoJy91c2VycycsICdVc2Vyc0NvbnRyb2xsZXIuc3RvcmUnKVxuUm91dGUucHV0KCcvdXNlcnMvOmlkJywgJ1VzZXJzQ29udHJvbGxlci51cGRhdGUnKS5taWRkbGV3YXJlKCdhdXRoJylcblxuUm91dGUucG9zdCgnL2ZvcmdvdC1wYXNzd29yZCcsICdQYXNzd29yZHNDb250cm9sbGVyLmZvcmdvdFBhc3N3b3JkJylcblJvdXRlLnBvc3QoJy9yZXNldC1wYXNzd29yZCcsICdQYXNzd29yZHNDb250cm9sbGVyLnJlc2V0UGFzc3dvcmQnKVxuXG5Sb3V0ZS5wb3N0KCcvc2Vzc2lvbnMnLCAnU2Vzc2lvbnNDb250cm9sbGVyLnN0b3JlJylcblJvdXRlLmRlbGV0ZSgnL3Nlc3Npb25zJywgJ1Nlc3Npb25zQ29udHJvbGxlci5kZXN0cm95JylcblxuUm91dGUuZ2V0KCcvZ3JvdXBzJywgJ0dyb3Vwc0NvbnRyb2xsZXIuaW5kZXgnKS5taWRkbGV3YXJlKCdhdXRoJylcblJvdXRlLnBvc3QoJy9ncm91cHMnLCAnR3JvdXBzQ29udHJvbGxlci5zdG9yZScpLm1pZGRsZXdhcmUoJ2F1dGgnKVxuUm91dGUuZGVsZXRlKCcvZ3JvdXBzLzppZCcsICdHcm91cHNDb250cm9sbGVyLmRlc3Ryb3knKS5taWRkbGV3YXJlKCdhdXRoJylcblJvdXRlLnBhdGNoKCcvZ3JvdXBzLzppZCcsICdHcm91cHNDb250cm9sbGVyLnVwZGF0ZScpLm1pZGRsZXdhcmUoJ2F1dGgnKVxuUm91dGUuZGVsZXRlKCcvZ3JvdXBzLzpncm91cElkL3BsYXllcnMvOnBsYXllcklkJywgJ0dyb3Vwc0NvbnRyb2xsZXIucmVtb3ZlUGxheWVyJykubWlkZGxld2FyZSgnYXV0aCcpXG5cblJvdXRlLmdldCgnL2dyb3Vwcy86Z3JvdXBJZC9yZXF1ZXN0cycsICdHcm91cFJlcXVlc3RzQ29udHJvbGxlci5pbmRleCcpLm1pZGRsZXdhcmUoJ2F1dGgnKVxuUm91dGUucG9zdCgnL2dyb3Vwcy86Z3JvdXBJZC9yZXF1ZXN0cycsICdHcm91cFJlcXVlc3RzQ29udHJvbGxlci5zdG9yZScpLm1pZGRsZXdhcmUoJ2F1dGgnKVxuUm91dGUucG9zdCgnL2dyb3Vwcy86Z3JvdXBJZC9yZXF1ZXN0cy86cmVxdWVzdElkL2FjY2VwdCcsICdHcm91cFJlcXVlc3RzQ29udHJvbGxlci5hY2NlcHQnKS5taWRkbGV3YXJlKCdhdXRoJylcblJvdXRlLmRlbGV0ZSgnL2dyb3Vwcy86Z3JvdXBJZC9yZXF1ZXN0cy86cmVxdWVzdElkJywgJ0dyb3VwUmVxdWVzdHNDb250cm9sbGVyLmRlc3Ryb3knKS5taWRkbGV3YXJlKCdhdXRoJylcbiJdfQ==