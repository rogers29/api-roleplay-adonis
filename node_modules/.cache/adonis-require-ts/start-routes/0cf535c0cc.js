"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Route_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Route"));
Route_1.default.get('/', async () => {
    return { hello: 'world' };
});
Route_1.default.post('/users', 'UsersController.store');
Route_1.default.put('/users/:id', 'UsersController.update').middleware('auth');
Route_1.default.post('/forgot-password', 'PasswordsController.forgotPassword');
Route_1.default.post('/reset-password', 'PasswordsController.resetPassword');
Route_1.default.post('/sessions', 'SessionsController.store');
Route_1.default.delete('/sessions', 'SessionsController.destroy');
Route_1.default.get('/groups', 'GroupsController.index').middleware('auth');
Route_1.default.post('/groups', 'GroupsController.store').middleware('auth');
Route_1.default.delete('/groups/:id', 'GroupsController.destroy').middleware('auth');
Route_1.default.patch('/groups/:id', 'GroupsController.update').middleware('auth');
Route_1.default.delete('/groups/:groupId/players/:playerId', 'GroupsController.removePlayer').middleware('auth');
Route_1.default.get('/groups/:groupId/requests', 'GroupRequestsController.index').middleware('auth');
Route_1.default.post('/groups/:groupId/requests', 'GroupRequestsController.store').middleware('auth');
Route_1.default.post('/groups/:groupId/requests/:requestId/accept', 'GroupRequestsController.accept').middleware('auth');
Route_1.default.delete('/groups/:groupId/requests/:requestId', 'GroupRequestsController.destroy').middleware('auth');
//# sourceMappingURL=data:application/json;base64,