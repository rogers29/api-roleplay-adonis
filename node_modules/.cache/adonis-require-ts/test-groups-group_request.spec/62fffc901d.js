"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./../../database/factories/index");
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const GroupRequest_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/GroupRequest"));
const japa_1 = __importDefault(require("japa"));
const supertest_1 = __importDefault(require("supertest"));
const BASE_URL = `http://${process.env.HOST}:${process.env.PORT}`;
let token = '';
let user = {};
japa_1.default.group('Group Request', (group) => {
    (0, japa_1.default)('it should creat a group request', async (assert) => {
        const { id } = await index_1.UserFactory.create();
        const group = await index_1.GroupFactory.merge({ master: id }).create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post(`/groups/${group.id}/requests`)
            .set('Authorization', `Bearer ${token}`)
            .send({})
            .expect(201);
        assert.exists(body.groupRequest, 'GroupRequest undefined');
        assert.equal(body.groupRequest.userId, user.id);
        assert.equal(body.groupRequest.groupId, group.id);
        assert.equal(body.groupRequest.status, 'PENDING');
    });
    (0, japa_1.default)('it should retunr 409 when group request already exists', async (assert) => {
        const { id } = await index_1.UserFactory.create();
        const group = await index_1.GroupFactory.merge({ master: id }).create();
        await (0, supertest_1.default)(BASE_URL)
            .post(`/groups/${group.id}/requests`)
            .set('Authorization', `Bearer ${token}`)
            .send({});
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post(`/groups/${group.id}/requests`)
            .set('Authorization', `Bearer ${token}`)
            .send({})
            .expect(409);
        assert.equal(body.code, 'BAD_REQUEST');
        assert.equal(body.status, 409);
    });
    (0, japa_1.default)('it should return 422 when user is already in the group', async (assert) => {
        const groupPayload = {
            name: 'test',
            description: 'test',
            schedule: 'test',
            location: 'test',
            chronic: 'test',
            master: user.id,
        };
        const response = await (0, supertest_1.default)(BASE_URL)
            .post('/groups')
            .set('Authorization', `Bearer ${token}`)
            .send(groupPayload);
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post(`/groups/${response.body.group.id}/requests`)
            .set('Authorization', `Bearer ${token}`)
            .send({})
            .expect(422);
        assert.equal(body.code, 'BAD_REQUEST');
        assert.equal(body.status, 422);
    });
    (0, japa_1.default)('it should list group request by master', async (assert) => {
        const master = await index_1.UserFactory.create();
        const group = await index_1.GroupFactory.merge({ master: master.id }).create();
        const response = await (0, supertest_1.default)(BASE_URL)
            .post(`/groups/${group.id}/requests`)
            .set('Authorization', `Bearer ${token}`)
            .send({});
        const groupRequest = response.body.groupRequest;
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .get(`/groups/${group.id}/requests?master=${master.id}`)
            .set('Authorization', `Bearer ${token}`)
            .expect(200);
        assert.exists(body.groupRequests, 'GroupRequest undefined');
        assert.equal(body.groupRequests.length, 1);
        assert.equal(body.groupRequests[0].id, groupRequest.id);
        assert.equal(body.groupRequests[0].userId, groupRequest.userId);
        assert.equal(body.groupRequests[0].groupId, groupRequest.groupId);
        assert.equal(body.groupRequests[0].status, groupRequest.status);
        assert.equal(body.groupRequests[0].group.name, group.name);
        assert.equal(body.groupRequests[0].user.username, user.username);
        assert.equal(body.groupRequests[0].group.master, master.id);
    });
    (0, japa_1.default)('it should return an empty list when master has no group requests', async (assert) => {
        const master = await index_1.UserFactory.create();
        const group = await index_1.GroupFactory.merge({ master: master.id }).create();
        const response = await (0, supertest_1.default)(BASE_URL)
            .post(`/groups/${group.id}/requests`)
            .set('Authorization', `Bearer ${token}`)
            .send({});
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .get(`/groups/${group.id}/requests?master=${user.id}`)
            .set('Authorization', `Bearer ${token}`)
            .expect(200);
        assert.exists(body.groupRequests, 'GroupRequestes undefined');
        assert.equal(body.groupRequests.length, 0);
    });
    (0, japa_1.default)('it should return 422 when master is not provided', async (assert) => {
        const master = await index_1.UserFactory.create();
        const group = await index_1.GroupFactory.merge({ master: master.id }).create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .get(`/groups/${group.id}/requests`)
            .set('Authorization', `Bearer ${token}`)
            .expect(422);
        assert.exists(body.code, 'BAD_REQUEST');
        assert.equal(body.status, 422);
    });
    (0, japa_1.default)('it should accept a group request', async (assert) => {
        const group = await index_1.GroupFactory.merge({ master: user.id }).create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post(`/groups/${group.id}/requests`)
            .set('Authorization', `Bearer ${token}`)
            .send({});
        const response = await (0, supertest_1.default)(BASE_URL)
            .post(`/groups/${group.id}/requests/${body.groupRequest.id}/accept`)
            .set('Authorization', `Bearer ${token}`)
            .expect(200);
        assert.exists(response.body.groupRequest, 'GroupResquest undefined');
        assert.equal(response.body.groupRequest.userId, user.id);
        assert.equal(response.body.groupRequest.groupId, group.id);
        assert.equal(response.body.groupRequest.status, 'ACCEPTED');
        await group.load('players');
        assert.isNotEmpty(group.players);
        assert.equal(group.players.length, 1);
        assert.equal(group.players[0].id, user.id);
    });
    (0, japa_1.default)('it should return 404 when providing an unexisting group', async (assert) => {
        const master = await index_1.UserFactory.create();
        const group = await index_1.GroupFactory.merge({ master: master.id }).create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post(`/groups/${group.id}/requests`)
            .set('Authorization', `Bearer ${token}`)
            .send({});
        const response = await (0, supertest_1.default)(BASE_URL)
            .post(`/groups/123/requests/${body.groupRequest.id}/accept`)
            .set('Authorization', `Bearer ${token}`)
            .expect(404);
        assert.equal(response.body.code, 'BAD_REQUEST');
        assert.equal(response.body.status, 404);
    });
    (0, japa_1.default)('it should return 404 when providing an unexisting group request', async (assert) => {
        const master = await index_1.UserFactory.create();
        const group = await index_1.GroupFactory.merge({ master: master.id }).create();
        await (0, supertest_1.default)(BASE_URL)
            .post(`/groups/${group.id}/requests`)
            .set('Authorization', `Bearer ${token}`)
            .send({});
        const response = await (0, supertest_1.default)(BASE_URL)
            .post(`/groups/${group.id}/requests/123/accept`)
            .set('Authorization', `Bearer ${token}`)
            .expect(404);
        assert.equal(response.body.code, 'BAD_REQUEST');
        assert.equal(response.body.status, 404);
    });
    (0, japa_1.default)('it should reject a group request', async (assert) => {
        const group = await index_1.GroupFactory.merge({ master: user.id }).create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post(`/groups/${group.id}/requests`)
            .set('Authorization', `Bearer ${token}`)
            .send({});
        await (0, supertest_1.default)(BASE_URL)
            .delete(`/groups/${group.id}/requests/${body.groupRequest.id}`)
            .set('Authorization', `Bearer ${token}`)
            .expect(200);
        const groupRequest = await GroupRequest_1.default.find(body.groupRequest.id);
        assert.isNull(groupRequest);
    });
    (0, japa_1.default)('it should return 404 when provinding an unexisting group for rejection', async (assert) => {
        const master = await index_1.UserFactory.create();
        const group = await index_1.GroupFactory.merge({ master: master.id }).create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post(`/groups/${group.id}/requests`)
            .set('Authorization', `Bearer ${token}`)
            .send({});
        const response = await (0, supertest_1.default)(BASE_URL)
            .delete(`/groups/123/requests/${body.groupRequest.id}`)
            .set('Authorization', `Bearer ${token}`)
            .expect(404);
        assert.equal(response.body.code, 'BAD_REQUEST');
        assert.equal(response.body.status, 404);
    });
    (0, japa_1.default)('it should return 404 when provinding an unexisting group request for rejection', async (assert) => {
        const master = await index_1.UserFactory.create();
        const group = await index_1.GroupFactory.merge({ master: master.id }).create();
        await (0, supertest_1.default)(BASE_URL)
            .post(`/groups/${group.id}/requests`)
            .set('Authorization', `Bearer ${token}`)
            .send({});
        const response = await (0, supertest_1.default)(BASE_URL)
            .delete(`/groups/${group.id}/requests/123`)
            .set('Authorization', `Bearer ${token}`)
            .expect(404);
        assert.equal(response.body.code, 'BAD_REQUEST');
        assert.equal(response.body.status, 404);
    });
    group.before(async () => {
        const plainPassword = 'test';
        const newUser = await index_1.UserFactory.merge({ password: plainPassword }).create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post('/sessions')
            .send({ email: newUser.email, password: plainPassword })
            .expect(201);
        token = body.token.token;
        user = newUser;
    });
    group.after(async () => {
        await (0, supertest_1.default)(BASE_URL)
            .delete('/sessions')
            .set('Authorization', `Bearer ${token}`);
    });
    group.beforeEach(async () => {
        await Database_1.default.beginGlobalTransaction();
    });
    group.afterEach(async () => {
        await Database_1.default.rollbackGlobalTransaction();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXBfcmVxdWVzdC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ3JvdXBfcmVxdWVzdC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNERBQTRFO0FBQzVFLDJGQUFpRDtBQUNqRCxpR0FBa0Q7QUFFbEQsZ0RBQXVCO0FBQ3ZCLDBEQUFpQztBQUVqQyxNQUFNLFFBQVEsR0FBRyxVQUFVLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUE7QUFFakUsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFBO0FBQ2QsSUFBSSxJQUFJLEdBQUcsRUFBVSxDQUFBO0FBRXJCLGNBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7SUFDcEMsSUFBQSxjQUFJLEVBQUMsaUNBQWlDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3ZELE1BQU0sRUFBRSxFQUFFLEVBQUUsR0FBRyxNQUFNLG1CQUFXLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDekMsTUFBTSxLQUFLLEdBQUcsTUFBTSxvQkFBWSxDQUFDLEtBQUssQ0FBQyxFQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBRTdELE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUEsbUJBQVMsRUFBQyxRQUFRLENBQUM7YUFDdkMsSUFBSSxDQUFDLFdBQVcsS0FBSyxDQUFDLEVBQUUsV0FBVyxDQUFDO2FBQ3BDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsVUFBVSxLQUFLLEVBQUUsQ0FBQzthQUN2QyxJQUFJLENBQUMsRUFBRSxDQUFDO2FBQ1IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBRWQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLHdCQUF3QixDQUFDLENBQUE7UUFDMUQsTUFBTSxDQUFD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QUM1QyxDQUFDLENBQUMsQ0FBQTtJQUVGLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDMUIsTUFBTSxrQkFBUSxDQUFDLHNCQUFzQixFQUFFLENBQUE7SUFDekMsQ0FBQyxDQUFDLENBQUE7SUFDRixLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3pCLE1BQU0sa0JBQVEsQ0FBQyx5QkFBeUIsRUFBRSxDQUFBO0lBQzVDLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcm91cEZhY3RvcnksIFVzZXJGYWN0b3J5IH0gZnJvbSAnLi8uLi8uLi9kYXRhYmFzZS9mYWN0b3JpZXMvaW5kZXgnXG5pbXBvcnQgRGF0YWJhc2UgZnJvbSAnQGlvYzpBZG9uaXMvTHVjaWQvRGF0YWJhc2UnXG5pbXBvcnQgR3JvdXBSZXF1ZXN0IGZyb20gJ0FwcC9Nb2RlbHMvR3JvdXBSZXF1ZXN0J1xuaW1wb3J0IFVzZXIgZnJvbSAnQXBwL01vZGVscy9Vc2VyJ1xuaW1wb3J0IHRlc3QgZnJvbSAnamFwYSdcbmltcG9ydCBzdXBlcnRlc3QgZnJvbSAnc3VwZXJ0ZXN0J1xuXG5jb25zdCBCQVNFX1VSTCA9IGBodHRwOi8vJHtwcm9jZXNzLmVudi5IT1NUfToke3Byb2Nlc3MuZW52LlBPUlR9YFxuXG5sZXQgdG9rZW4gPSAnJ1xubGV0IHVzZXIgPSB7fSBhcyBVc2VyXG5cbnRlc3QuZ3JvdXAoJ0dyb3VwIFJlcXVlc3QnLCAoZ3JvdXApID0+IHtcbiAgdGVzdCgnaXQgc2hvdWxkIGNyZWF0IGEgZ3JvdXAgcmVxdWVzdCcsIGFzeW5jIChhc3NlcnQpID0+IHtcbiAgICBjb25zdCB7IGlkIH0gPSBhd2FpdCBVc2VyRmFjdG9yeS5jcmVhdGUoKVxuICAgIGNvbnN0IGdyb3VwID0gYXdhaXQgR3JvdXBGYWN0b3J5Lm1lcmdlKHttYXN0ZXI6IGlkfSkuY3JlYXRlKClcblxuICAgIGNvbnN0IHsgYm9keSB9ID0gYXdhaXQgc3VwZXJ0ZXN0KEJBU0VfVVJMKVxuICAgICAgLnBvc3QoYC9ncm91cHMvJHtncm91cC5pZH0vcmVxdWVzdHNgKVxuICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKVxuICAgICAgLnNlbmQoe30pXG4gICAgICAuZXhwZWN0KDIwMSlcblxuICAgIGFzc2VydC5leGlzdHMoYm9keS5ncm91cFJlcXVlc3QsICdHcm91cFJlcXVlc3QgdW5kZWZpbmVkJylcbiAgICBhc3NlcnQuZXF1YWwoYm9keS5ncm91cFJlcXVlc3QudXNlcklkLCB1c2VyLmlkKVxuICAgIGFzc2VydC5lcXVhbChib2R5Lmdyb3VwUmVxdWVzdC5ncm91cElkLCBncm91cC5pZClcbiAgICBhc3NlcnQuZXF1YWwoYm9keS5ncm91cFJlcXVlc3Quc3RhdHVzLCAnUEVORElORycpXG4gIH0pXG4gIHRlc3QoJ2l0IHNob3VsZCByZXR1bnIgNDA5IHdoZW4gZ3JvdXAgcmVxdWVzdCBhbHJlYWR5IGV4aXN0cycsIGFzeW5jIChhc3NlcnQpID0+IHtcbiAgICBjb25zdCB7IGlkIH0gPSBhd2FpdCBVc2VyRmFjdG9yeS5jcmVhdGUoKVxuICAgIGNvbnN0IGdyb3VwID0gYXdhaXQgR3JvdXBGYWN0b3J5Lm1lcmdlKHttYXN0ZXI6IGlkfSkuY3JlYXRlKClcblxuICAgIGF3YWl0IHN1cGVydGVzdChCQVNFX1VSTClcbiAgICAgIC5wb3N0KGAvZ3JvdXBzLyR7Z3JvdXAuaWR9L3JlcXVlc3RzYClcbiAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dG9rZW59YClcbiAgICAgIC5zZW5kKHt9KVxuXG4gICAgY29uc3QgeyBib2R5IH0gPSBhd2FpdCBzdXBlcnRlc3QoQkFTRV9VUkwpXG4gICAgICAucG9zdChgL2dyb3Vwcy8ke2dyb3VwLmlkfS9yZXF1ZXN0c2ApXG4gICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke3Rva2VufWApXG4gICAgICAuc2VuZCh7fSlcbiAgICAgIC5leHBlY3QoNDA5KVxuXG4gICAgYXNzZXJ0LmVxdWFsKGJvZHkuY29kZSwgJ0JBRF9SRVFVRVNUJylcbiAgICBhc3NlcnQuZXF1YWwoYm9keS5zdGF0dXMsIDQwOSlcbiAgfSlcblxuICB0ZXN0KCdpdCBzaG91bGQgcmV0dXJuIDQyMiB3aGVuIHVzZXIgaXMgYWxyZWFkeSBpbiB0aGUgZ3JvdXAnLCBhc3luYyAoYXNzZXJ0KSA9PiB7XG4gICAgY29uc3QgZ3JvdXBQYXlsb2FkID0ge1xuICAgICAgbmFtZTogJ3Rlc3QnLFxuICAgICAgZGVzY3JpcHRpb246ICd0ZXN0JyxcbiAgICAgIHNjaGVkdWxlOiAndGVzdCcsXG4gICAgICBsb2NhdGlvbjogJ3Rlc3QnLFxuICAgICAgY2hyb25pYzondGVzdCcsXG4gICAgICBtYXN0ZXI6IHVzZXIuaWQsXG4gICAgfVxuXG4gICAgLy8gTWFzdGVyIGlzIGFkZGVkIHRvIGdyb3VwXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlcnRlc3QoQkFTRV9VUkwpXG4gICAgICAucG9zdCgnL2dyb3VwcycpXG4gICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke3Rva2VufWApXG4gICAgICAuc2VuZChncm91cFBheWxvYWQpXG5cbiAgICBjb25zdCB7IGJvZHkgfSA9IGF3YWl0IHN1cGVydGVzdChCQVNFX1VSTClcbiAgICAgIC5wb3N0KGAvZ3JvdXBzLyR7cmVzcG9uc2UuYm9keS5ncm91cC5pZH0vcmVxdWVzdHNgKVxuICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKVxuICAgICAgLnNlbmQoe30pXG4gICAgICAuZXhwZWN0KDQyMilcblxuICAgIGFzc2VydC5lcXVhbChib2R5LmNvZGUsICdCQURfUkVRVUVTVCcpXG4gICAgYXNzZXJ0LmVxdWFsKGJvZHkuc3RhdHVzLCA0MjIpXG4gIH0pXG5cbiAgdGVzdCgnaXQgc2hvdWxkIGxpc3QgZ3JvdXAgcmVxdWVzdCBieSBtYXN0ZXInLCBhc3luYyAoYXNzZXJ0KSA9PiB7XG4gICAgY29uc3QgbWFzdGVyID0gYXdhaXQgVXNlckZhY3RvcnkuY3JlYXRlKClcbiAgICBjb25zdCBncm91cCA9IGF3YWl0IEdyb3VwRmFjdG9yeS5tZXJnZSh7IG1hc3RlcjogbWFzdGVyLmlkIH0pLmNyZWF0ZSgpXG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVydGVzdChCQVNFX1VSTClcbiAgICAgIC5wb3N0KGAvZ3JvdXBzLyR7Z3JvdXAuaWR9L3JlcXVlc3RzYClcbiAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dG9rZW59YClcbiAgICAgIC5zZW5kKHt9KVxuXG4gICAgY29uc3QgZ3JvdXBSZXF1ZXN0ID0gcmVzcG9uc2UuYm9keS5ncm91cFJlcXVlc3RcblxuICAgIGNvbnN0IHsgYm9keSB9ID0gYXdhaXQgc3VwZXJ0ZXN0KEJBU0VfVVJMKVxuICAgICAgLmdldChgL2dyb3Vwcy8ke2dyb3VwLmlkfS9yZXF1ZXN0cz9tYXN0ZXI9JHsgbWFzdGVyLmlkIH1gKVxuICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKVxuICAgICAgLmV4cGVjdCgyMDApXG5cbiAgICBhc3NlcnQuZXhpc3RzKGJvZHkuZ3JvdXBSZXF1ZXN0cywgJ0dyb3VwUmVxdWVzdCB1bmRlZmluZWQnKVxuICAgIGFzc2VydC5lcXVhbChib2R5Lmdyb3VwUmVxdWVzdHMubGVuZ3RoLCAxKVxuICAgIGFzc2VydC5lcXVhbChib2R5Lmdyb3VwUmVxdWVzdHNbMF0uaWQsIGdyb3VwUmVxdWVzdC5pZClcbiAgICBhc3NlcnQuZXF1YWwoYm9keS5ncm91cFJlcXVlc3RzWzBdLnVzZXJJZCwgZ3JvdXBSZXF1ZXN0LnVzZXJJZClcbiAgICBhc3NlcnQuZXF1YWwoYm9keS5ncm91cFJlcXVlc3RzWzBdLmdyb3VwSWQsIGdyb3VwUmVxdWVzdC5ncm91cElkKVxuICAgIGFzc2VydC5lcXVhbChib2R5Lmdyb3VwUmVxdWVzdHNbMF0uc3RhdHVzLCBncm91cFJlcXVlc3Quc3RhdHVzKVxuICAgIGFzc2VydC5lcXVhbChib2R5Lmdyb3VwUmVxdWVzdHNbMF0uZ3JvdXAubmFtZSwgZ3JvdXAubmFtZSlcbiAgICBhc3NlcnQuZXF1YWwoYm9keS5ncm91cFJlcXVlc3RzWzBdLnVzZXIudXNlcm5hbWUsIHVzZXIudXNlcm5hbWUpXG4gICAgYXNzZXJ0LmVxdWFsKGJvZHkuZ3JvdXBSZXF1ZXN0c1swXS5ncm91cC5tYXN0ZXIsIG1hc3Rlci5pZClcbiAgfSlcblxuICB0ZXN0KCdpdCBzaG91bGQgcmV0dXJuIGFuIGVtcHR5IGxpc3Qgd2hlbiBtYXN0ZXIgaGFzIG5vIGdyb3VwIHJlcXVlc3RzJywgYXN5bmMgKGFzc2VydCkgPT4ge1xuICAgIGNvbnN0IG1hc3RlciA9IGF3YWl0IFVzZXJGYWN0b3J5LmNyZWF0ZSgpXG4gICAgY29uc3QgZ3JvdXAgPSBhd2FpdCBHcm91cEZhY3RvcnkubWVyZ2UoeyBtYXN0ZXI6IG1hc3Rlci5pZCB9KS5jcmVhdGUoKVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlcnRlc3QoQkFTRV9VUkwpXG4gICAgICAucG9zdChgL2dyb3Vwcy8ke2dyb3VwLmlkfS9yZXF1ZXN0c2ApXG4gICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke3Rva2VufWApXG4gICAgICAuc2VuZCh7fSlcblxuICAgIGNvbnN0IHsgYm9keSB9ID0gYXdhaXQgc3VwZXJ0ZXN0KEJBU0VfVVJMKVxuICAgICAgLmdldChgL2dyb3Vwcy8ke2dyb3VwLmlkfS9yZXF1ZXN0cz9tYXN0ZXI9JHsgdXNlci5pZCB9YClcbiAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dG9rZW59YClcbiAgICAgIC5leHBlY3QoMjAwKVxuXG4gICAgYXNzZXJ0LmV4aXN0cyhib2R5Lmdyb3VwUmVxdWVzdHMsICdHcm91cFJlcXVlc3RlcyB1bmRlZmluZWQnKVxuICAgIGFzc2VydC5lcXVhbChib2R5Lmdyb3VwUmVxdWVzdHMubGVuZ3RoLCAwKVxuICB9KVxuXG4gIHRlc3QoJ2l0IHNob3VsZCByZXR1cm4gNDIyIHdoZW4gbWFzdGVyIGlzIG5vdCBwcm92aWRlZCcsIGFzeW5jIChhc3NlcnQpID0+IHtcbiAgICBjb25zdCBtYXN0ZXIgPSBhd2FpdCBVc2VyRmFjdG9yeS5jcmVhdGUoKVxuICAgIGNvbnN0IGdyb3VwID0gYXdhaXQgR3JvdXBGYWN0b3J5Lm1lcmdlKHsgbWFzdGVyOiBtYXN0ZXIuaWQgfSkuY3JlYXRlKClcblxuICAgIGNvbnN0IHsgYm9keSB9ID0gYXdhaXQgc3VwZXJ0ZXN0KEJBU0VfVVJMKVxuICAgICAgLmdldChgL2dyb3Vwcy8ke2dyb3VwLmlkfS9yZXF1ZXN0c2ApXG4gICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke3Rva2VufWApXG4gICAgICAuZXhwZWN0KDQyMilcblxuICAgIGFzc2VydC5leGlzdHMoYm9keS5jb2RlLCAnQkFEX1JFUVVFU1QnKVxuICAgIGFzc2VydC5lcXVhbChib2R5LnN0YXR1cywgNDIyKVxuICB9KVxuXG4gIHRlc3QoJ2l0IHNob3VsZCBhY2NlcHQgYSBncm91cCByZXF1ZXN0JywgYXN5bmMgKGFzc2VydCkgPT4ge1xuICAgIGNvbnN0IGdyb3VwID0gYXdhaXQgR3JvdXBGYWN0b3J5Lm1lcmdlKHsgbWFzdGVyOiB1c2VyLmlkIH0pLmNyZWF0ZSgpXG5cbiAgICBjb25zdCB7IGJvZHkgfSA9IGF3YWl0IHN1cGVydGVzdChCQVNFX1VSTClcbiAgICAgIC5wb3N0KGAvZ3JvdXBzLyR7Z3JvdXAuaWR9L3JlcXVlc3RzYClcbiAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dG9rZW59YClcbiAgICAgIC5zZW5kKHt9KVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlcnRlc3QoQkFTRV9VUkwpXG4gICAgICAucG9zdChgL2dyb3Vwcy8ke2dyb3VwLmlkfS9yZXF1ZXN0cy8ke2JvZHkuZ3JvdXBSZXF1ZXN0LmlkfS9hY2NlcHRgKVxuICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKVxuICAgICAgLmV4cGVjdCgyMDApXG5cbiAgICBhc3NlcnQuZXhpc3RzKHJlc3BvbnNlLmJvZHkuZ3JvdXBSZXF1ZXN0LCAnR3JvdXBSZXNxdWVzdCB1bmRlZmluZWQnKVxuICAgIGFzc2VydC5lcXVhbChyZXNwb25zZS5ib2R5Lmdyb3VwUmVxdWVzdC51c2VySWQsIHVzZXIuaWQpXG4gICAgYXNzZXJ0LmVxdWFsKHJlc3BvbnNlLmJvZHkuZ3JvdXBSZXF1ZXN0Lmdyb3VwSWQsIGdyb3VwLmlkKVxuICAgIGFzc2VydC5lcXVhbChyZXNwb25zZS5ib2R5Lmdyb3VwUmVxdWVzdC5zdGF0dXMsICdBQ0NFUFRFRCcpXG5cbiAgICBhd2FpdCBncm91cC5sb2FkKCdwbGF5ZXJzJylcbiAgICBhc3NlcnQuaXNOb3RFbXB0eShncm91cC5wbGF5ZXJzKVxuICAgIGFzc2VydC5lcXVhbChncm91cC5wbGF5ZXJzLmxlbmd0aCwgMSlcbiAgICBhc3NlcnQuZXF1YWwoZ3JvdXAucGxheWVyc1swXS5pZCwgdXNlci5pZClcbiAgfSlcblxuICB0ZXN0KCdpdCBzaG91bGQgcmV0dXJuIDQwNCB3aGVuIHByb3ZpZGluZyBhbiB1bmV4aXN0aW5nIGdyb3VwJywgYXN5bmMgKGFzc2VydCkgPT4ge1xuICAgIGNvbnN0IG1hc3RlciA9IGF3YWl0IFVzZXJGYWN0b3J5LmNyZWF0ZSgpXG4gICAgY29uc3QgZ3JvdXAgPSBhd2FpdCBHcm91cEZhY3RvcnkubWVyZ2UoeyBtYXN0ZXI6IG1hc3Rlci5pZCB9KS5jcmVhdGUoKVxuXG4gICAgY29uc3QgeyBib2R5IH0gPSBhd2FpdCBzdXBlcnRlc3QoQkFTRV9VUkwpXG4gICAgICAucG9zdChgL2dyb3Vwcy8ke2dyb3VwLmlkfS9yZXF1ZXN0c2ApXG4gICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke3Rva2VufWApXG4gICAgICAuc2VuZCh7fSlcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3VwZXJ0ZXN0KEJBU0VfVVJMKVxuICAgICAgLnBvc3QoYC9ncm91cHMvMTIzL3JlcXVlc3RzLyR7Ym9keS5ncm91cFJlcXVlc3QuaWR9L2FjY2VwdGApXG4gICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke3Rva2VufWApXG4gICAgICAuZXhwZWN0KDQwNClcblxuICAgIGFzc2VydC5lcXVhbChyZXNwb25zZS5ib2R5LmNvZGUsICdCQURfUkVRVUVTVCcpXG4gICAgYXNzZXJ0LmVxdWFsKHJlc3BvbnNlLmJvZHkuc3RhdHVzLCA0MDQpXG4gIH0pXG5cbiAgdGVzdCgnaXQgc2hvdWxkIHJldHVybiA0MDQgd2hlbiBwcm92aWRpbmcgYW4gdW5leGlzdGluZyBncm91cCByZXF1ZXN0JywgYXN5bmMgKGFzc2VydCkgPT4ge1xuICAgIGNvbnN0IG1hc3RlciA9IGF3YWl0IFVzZXJGYWN0b3J5LmNyZWF0ZSgpXG4gICAgY29uc3QgZ3JvdXAgPSBhd2FpdCBHcm91cEZhY3RvcnkubWVyZ2UoeyBtYXN0ZXI6IG1hc3Rlci5pZCB9KS5jcmVhdGUoKVxuXG4gICAgYXdhaXQgc3VwZXJ0ZXN0KEJBU0VfVVJMKVxuICAgICAgLnBvc3QoYC9ncm91cHMvJHtncm91cC5pZH0vcmVxdWVzdHNgKVxuICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKVxuICAgICAgLnNlbmQoe30pXG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVydGVzdChCQVNFX1VSTClcbiAgICAgIC5wb3N0KGAvZ3JvdXBzLyR7Z3JvdXAuaWR9L3JlcXVlc3RzLzEyMy9hY2NlcHRgKVxuICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKVxuICAgICAgLmV4cGVjdCg0MDQpXG5cbiAgICBhc3NlcnQuZXF1YWwocmVzcG9uc2UuYm9keS5jb2RlLCAnQkFEX1JFUVVFU1QnKVxuICAgIGFzc2VydC5lcXVhbChyZXNwb25zZS5ib2R5LnN0YXR1cywgNDA0KVxuICB9KVxuXG4gIHRlc3QoJ2l0IHNob3VsZCByZWplY3QgYSBncm91cCByZXF1ZXN0JywgYXN5bmMgKGFzc2VydCkgPT4ge1xuICAgIGNvbnN0IGdyb3VwID0gYXdhaXQgR3JvdXBGYWN0b3J5Lm1lcmdlKHsgbWFzdGVyOiB1c2VyLmlkIH0pLmNyZWF0ZSgpXG5cbiAgICBjb25zdCB7IGJvZHkgfSA9IGF3YWl0IHN1cGVydGVzdChCQVNFX1VSTClcbiAgICAgIC5wb3N0KGAvZ3JvdXBzLyR7Z3JvdXAuaWR9L3JlcXVlc3RzYClcbiAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dG9rZW59YClcbiAgICAgIC5zZW5kKHt9KVxuXG4gICAgYXdhaXQgc3VwZXJ0ZXN0KEJBU0VfVVJMKVxuICAgICAgLmRlbGV0ZShgL2dyb3Vwcy8ke2dyb3VwLmlkfS9yZXF1ZXN0cy8ke2JvZHkuZ3JvdXBSZXF1ZXN0LmlkfWApXG4gICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke3Rva2VufWApXG4gICAgICAuZXhwZWN0KDIwMClcblxuICAgIGNvbnN0IGdyb3VwUmVxdWVzdCA9IGF3YWl0IEdyb3VwUmVxdWVzdC5maW5kKGJvZHkuZ3JvdXBSZXF1ZXN0LmlkKVxuICAgIGFzc2VydC5pc051bGwoZ3JvdXBSZXF1ZXN0KVxuICB9KVxuXG4gIHRlc3QoJ2l0IHNob3VsZCByZXR1cm4gNDA0IHdoZW4gcHJvdmluZGluZyBhbiB1bmV4aXN0aW5nIGdyb3VwIGZvciByZWplY3Rpb24nLCBhc3luYyAoYXNzZXJ0KSA9PiB7XG4gICAgY29uc3QgbWFzdGVyID0gYXdhaXQgVXNlckZhY3RvcnkuY3JlYXRlKClcbiAgICBjb25zdCBncm91cCA9IGF3YWl0IEdyb3VwRmFjdG9yeS5tZXJnZSh7IG1hc3RlcjogbWFzdGVyLmlkIH0pLmNyZWF0ZSgpXG5cbiAgICBjb25zdCB7IGJvZHkgfSA9IGF3YWl0IHN1cGVydGVzdChCQVNFX1VSTClcbiAgICAgIC5wb3N0KGAvZ3JvdXBzLyR7Z3JvdXAuaWR9L3JlcXVlc3RzYClcbiAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dG9rZW59YClcbiAgICAgIC5zZW5kKHt9KVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlcnRlc3QoQkFTRV9VUkwpXG4gICAgICAuZGVsZXRlKGAvZ3JvdXBzLzEyMy9yZXF1ZXN0cy8ke2JvZHkuZ3JvdXBSZXF1ZXN0LmlkfWApXG4gICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke3Rva2VufWApXG4gICAgICAuZXhwZWN0KDQwNClcblxuICAgIGFzc2VydC5lcXVhbChyZXNwb25zZS5ib2R5LmNvZGUsICdCQURfUkVRVUVTVCcpXG4gICAgYXNzZXJ0LmVxdWFsKHJlc3BvbnNlLmJvZHkuc3RhdHVzLCA0MDQpXG4gIH0pXG5cbiAgdGVzdCgnaXQgc2hvdWxkIHJldHVybiA0MDQgd2hlbiBwcm92aW5kaW5nIGFuIHVuZXhpc3RpbmcgZ3JvdXAgcmVxdWVzdCBmb3IgcmVqZWN0aW9uJywgYXN5bmMgKGFzc2VydCkgPT4ge1xuICAgIGNvbnN0IG1hc3RlciA9IGF3YWl0IFVzZXJGYWN0b3J5LmNyZWF0ZSgpXG4gICAgY29uc3QgZ3JvdXAgPSBhd2FpdCBHcm91cEZhY3RvcnkubWVyZ2UoeyBtYXN0ZXI6IG1hc3Rlci5pZCB9KS5jcmVhdGUoKVxuXG4gICAgYXdhaXQgc3VwZXJ0ZXN0KEJBU0VfVVJMKVxuICAgICAgLnBvc3QoYC9ncm91cHMvJHtncm91cC5pZH0vcmVxdWVzdHNgKVxuICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHt0b2tlbn1gKVxuICAgICAgLnNlbmQoe30pXG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVydGVzdChCQVNFX1VSTClcbiAgICAgIC5kZWxldGUoYC9ncm91cHMvJHtncm91cC5pZH0vcmVxdWVzdHMvMTIzYClcbiAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dG9rZW59YClcbiAgICAgIC5leHBlY3QoNDA0KVxuXG4gICAgYXNzZXJ0LmVxdWFsKHJlc3BvbnNlLmJvZHkuY29kZSwgJ0JBRF9SRVFVRVNUJylcbiAgICBhc3NlcnQuZXF1YWwocmVzcG9uc2UuYm9keS5zdGF0dXMsIDQwNClcbiAgfSlcbiAgLy8gdGVzdCgnJywgYXN5bmMgKGFzc2VydCkgPT4ge30pXG5cbiAgZ3JvdXAuYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBwbGFpblBhc3N3b3JkID0gJ3Rlc3QnXG4gICAgY29uc3QgbmV3VXNlciA9IGF3YWl0IFVzZXJGYWN0b3J5Lm1lcmdlKHsgcGFzc3dvcmQ6IHBsYWluUGFzc3dvcmQgfSkuY3JlYXRlKClcbiAgICBjb25zdCB7IGJvZHkgfSA9IGF3YWl0IHN1cGVydGVzdChCQVNFX1VSTClcbiAgICAgIC5wb3N0KCcvc2Vzc2lvbnMnKVxuICAgICAgLnNlbmQoeyBlbWFpbDogbmV3VXNlci5lbWFpbCwgcGFzc3dvcmQ6IHBsYWluUGFzc3dvcmQgfSlcbiAgICAgIC5leHBlY3QoMjAxKVxuXG4gICAgdG9rZW4gPSBib2R5LnRva2VuLnRva2VuXG4gICAgdXNlciA9IG5ld1VzZXJcbiAgfSlcblxuICBncm91cC5hZnRlcihhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgc3VwZXJ0ZXN0KEJBU0VfVVJMKVxuICAgICAgLmRlbGV0ZSgnL3Nlc3Npb25zJylcbiAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7dG9rZW59YClcbiAgfSlcblxuICBncm91cC5iZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBEYXRhYmFzZS5iZWdpbkdsb2JhbFRyYW5zYWN0aW9uKClcbiAgfSlcbiAgZ3JvdXAuYWZ0ZXJFYWNoKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBEYXRhYmFzZS5yb2xsYmFja0dsb2JhbFRyYW5zYWN0aW9uKClcbiAgfSlcbn0pXG4iXX0=