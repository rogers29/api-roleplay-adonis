"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./../../database/factories/index");
const japa_1 = __importDefault(require("japa"));
const supertest_1 = __importDefault(require("supertest"));
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const BASE_URL = `http://${process.env.HOST}:${process.env.PORT}`;
japa_1.default.group('Session', (group) => {
    (0, japa_1.default)('it should authentication an user', async (assert) => {
        const plainPassword = 'test';
        const { id, email } = await index_1.UserFactory.merge({ password: plainPassword }).create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post('/sessions')
            .send({ email, password: plainPassword })
            .expect(201);
        assert.isDefined(body.user, 'User undefined');
        assert.equal(body.user.id, id);
    });
    (0, japa_1.default)('it should return an api token when session is created', async (assert) => {
        const plainPassword = 'test';
        const { id, email } = await index_1.UserFactory.merge({ password: plainPassword }).create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post('/sessions')
            .send({ email, password: plainPassword })
            .expect(201);
        assert.isDefined(body.token, 'Token undefined');
        assert.equal(body.user.id, id);
    });
    (0, japa_1.default)('it should return 400 when credentials are not provided', async (assert) => {
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post('/sessions')
            .send({})
            .expect(400);
        assert.equal(body.code, 'BAD_REQUEST');
        assert.equal(body.status, 400);
    });
    (0, japa_1.default)('it should return 400 when credentials are invalid', async (assert) => {
        const { email } = await index_1.UserFactory.create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post('/sessions')
            .send({ email, password: 'test' })
            .expect(400);
        assert.equal(body.code, 'BAD_REQUEST');
        assert.equal(body.status, 400);
        assert.equal(body.message, 'invalid credentials');
    });
    (0, japa_1.default)('it should return 200 when user signs out', async (assert) => {
        const plainPassword = 'test';
        const { id, email } = await index_1.UserFactory.merge({ password: plainPassword }).create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post('/sessions')
            .send({ email, password: plainPassword })
            .expect(201);
        const apiToken = body.token;
        await (0, supertest_1.default)(BASE_URL)
            .delete('/sessions')
            .set('Authorization', `Bearer ${apiToken.token}`)
            .expect(200);
    });
    (0, japa_1.default)('it should revoke token when user signs out', async (assert) => {
        const plainPassword = 'test';
        const { email } = await index_1.UserFactory.merge({ password: plainPassword }).create();
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post('/sessions')
            .send({ email, password: plainPassword })
            .expect(201);
        const apiToken = body.token;
        await (0, supertest_1.default)(BASE_URL)
            .delete('/sessions')
            .set('Authorization', `Bearer ${apiToken.token}`)
            .expect(200);
        const token = await Database_1.default.query()
            .select('*')
            .from('api_tokens');
        assert.isEmpty(token);
    });
    group.beforeEach(async () => {
        await Database_1.default.beginGlobalTransaction();
    });
    group.afterEach(async () => {
        await Database_1.default.rollbackGlobalTransaction();
    });
});
//# sourceMappingURL=data:application/json;base64,