"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Schema_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Schema"));
class default_1 extends Schema_1.default {
    constructor() {
        super(...arguments);
        this.tableName = 'groups_users';
    }
    async up() {
        this.schema.createTable(this.tableName, (table) => {
            table.primary(['user_id', 'group_id']);
            table.integer('user_id').unsigned().references('id').inTable('users').notNullable();
            table
                .integer('group_id')
                .unsigned()
                .references('id')
                .inTable('groups')
                .onDelete('CASCADE')
                .notNullable();
        });
    }
    async down() {
        this.schema.dropTable(this.tableName);
    }
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY4MDExNTU3MjA4OV9ncm91cHNfdXNlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIxNjgwMTE1NTcyMDg5X2dyb3Vwc191c2Vycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFDYixJQUFJLGVBQWUsR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksVUFBVSxHQUFHO0lBQ2pFLE9BQU8sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQzlELENBQUMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlELE1BQU0sUUFBUSxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztBQUN2RixNQUFNLFNBQVUsU0FBUSxRQUFRLENBQUMsT0FBTztJQUNwQztRQUNJLEtBQUssQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxTQUFTLEdBQUcsY0FBYyxDQUFDO0lBQ3BDLENBQUM7SUFDRCxLQUFLLENBQUMsRUFBRTtRQUNKLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUM5QyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDdkMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3BGLEtBQUs7aUJBQ0EsT0FBTyxDQUFDLFVBQVUsQ0FBQztpQkFDbkIsUUFBUSxFQUFFO2lCQUNWLFVBQVUsQ0FBQyxJQUFJLENBQUM7aUJBQ2hCLE9BQU8sQ0FBQyxRQUFRLENBQUM7aUJBQ2pCLFFBQVEsQ0FBQyxTQUFTLENBQUM7aUJBQ25CLFdBQVcsRUFBRSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNELEtBQUssQ0FBQyxJQUFJO1FBQ04sSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7Q0FDSjtBQUNELE9BQU8sQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBTY2hlbWFfMSA9IF9faW1wb3J0RGVmYXVsdChnbG9iYWxbU3ltYm9sLmZvcignaW9jLnVzZScpXShcIkFkb25pcy9MdWNpZC9TY2hlbWFcIikpO1xuY2xhc3MgZGVmYXVsdF8xIGV4dGVuZHMgU2NoZW1hXzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMudGFibGVOYW1lID0gJ2dyb3Vwc191c2Vycyc7XG4gICAgfVxuICAgIGFzeW5jIHVwKCkge1xuICAgICAgICB0aGlzLnNjaGVtYS5jcmVhdGVUYWJsZSh0aGlzLnRhYmxlTmFtZSwgKHRhYmxlKSA9PiB7XG4gICAgICAgICAgICB0YWJsZS5wcmltYXJ5KFsndXNlcl9pZCcsICdncm91cF9pZCddKTtcbiAgICAgICAgICAgIHRhYmxlLmludGVnZXIoJ3VzZXJfaWQnKS51bnNpZ25lZCgpLnJlZmVyZW5jZXMoJ2lkJykuaW5UYWJsZSgndXNlcnMnKS5ub3ROdWxsYWJsZSgpO1xuICAgICAgICAgICAgdGFibGVcbiAgICAgICAgICAgICAgICAuaW50ZWdlcignZ3JvdXBfaWQnKVxuICAgICAgICAgICAgICAgIC51bnNpZ25lZCgpXG4gICAgICAgICAgICAgICAgLnJlZmVyZW5jZXMoJ2lkJylcbiAgICAgICAgICAgICAgICAuaW5UYWJsZSgnZ3JvdXBzJylcbiAgICAgICAgICAgICAgICAub25EZWxldGUoJ0NBU0NBREUnKVxuICAgICAgICAgICAgICAgIC5ub3ROdWxsYWJsZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgZG93bigpIHtcbiAgICAgICAgdGhpcy5zY2hlbWEuZHJvcFRhYmxlKHRoaXMudGFibGVOYW1lKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWZhdWx0XzE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNVFk0TURFeE5UVTNNakE0T1Y5bmNtOTFjSE5mZFhObGNuTXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJeE5qZ3dNVEUxTlRjeU1EZzVYMmR5YjNWd2MxOTFjMlZ5Y3k1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenRCUVVGQkxIVkdRVUZwUkR0QlFVVnFSQ3hsUVVGeFFpeFRRVUZSTEdkQ1FVRlZPMGxCUVhaRE96dFJRVU5aTEdOQlFWTXNSMEZCUnl4alFVRmpMRU5CUVVFN1NVRnRRblJETEVOQlFVTTdTVUZxUWxFc1MwRkJTeXhEUVVGRExFVkJRVVU3VVVGRFlpeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVN1dVRkRhRVFzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRk5CUVZNc1JVRkJSU3hWUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZCTzFsQlEzUkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhYUVVGWExFVkJRVVVzUTBGQlFUdFpRVU51Uml4TFFVRkxPMmxDUVVOR0xFOUJRVThzUTBGQlF5eFZRVUZWTEVOQlFVTTdhVUpCUTI1Q0xGRkJRVkVzUlVGQlJUdHBRa0ZEVml4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRE8ybENRVU5vUWl4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRE8ybENRVU5xUWl4UlFVRlJMRU5CUVVNc1UwRkJVeXhEUVVGRE8ybENRVU51UWl4WFFVRlhMRVZCUVVVc1EwRkJRVHRSUVVOc1FpeERRVUZETEVOQlFVTXNRMEZCUVR0SlFVTktMRU5CUVVNN1NVRkZUU3hMUVVGTExFTkJRVU1zU1VGQlNUdFJRVU5tTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUVR0SlFVTjJReXhEUVVGRE8wTkJRMFk3UVVGd1FrUXNORUpCYjBKRElpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElFSmhjMlZUWTJobGJXRWdabkp2YlNBblFHbHZZenBCWkc5dWFYTXZUSFZqYVdRdlUyTm9aVzFoSjF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJsZUhSbGJtUnpJRUpoYzJWVFkyaGxiV0VnZTF4dUlDQndjbTkwWldOMFpXUWdkR0ZpYkdWT1lXMWxJRDBnSjJkeWIzVndjMTkxYzJWeWN5ZGNibHh1SUNCd2RXSnNhV01nWVhONWJtTWdkWEFnS0NrZ2UxeHVJQ0FnSUhSb2FYTXVjMk5vWlcxaExtTnlaV0YwWlZSaFlteGxLSFJvYVhNdWRHRmliR1ZPWVcxbExDQW9kR0ZpYkdVcElEMCtJSHRjYmlBZ0lDQWdJSFJoWW14bExuQnlhVzFoY25rb1d5ZDFjMlZ5WDJsa0p5d2dKMmR5YjNWd1gybGtKMTBwWEc0Z0lDQWdJQ0IwWVdKc1pTNXBiblJsWjJWeUtDZDFjMlZ5WDJsa0p5a3VkVzV6YVdkdVpXUW9LUzV5WldabGNtVnVZMlZ6S0NkcFpDY3BMbWx1VkdGaWJHVW9KM1Z6WlhKekp5a3VibTkwVG5Wc2JHRmliR1VvS1Z4dUlDQWdJQ0FnZEdGaWJHVmNiaUFnSUNBZ0lDQWdMbWx1ZEdWblpYSW9KMmR5YjNWd1gybGtKeWxjYmlBZ0lDQWdJQ0FnTG5WdWMybG5ibVZrS0NsY2JpQWdJQ0FnSUNBZ0xuSmxabVZ5Wlc1alpYTW9KMmxrSnlsY2JpQWdJQ0FnSUNBZ0xtbHVWR0ZpYkdVb0oyZHliM1Z3Y3ljcFhHNGdJQ0FnSUNBZ0lDNXZia1JsYkdWMFpTZ25RMEZUUTBGRVJTY3BYRzRnSUNBZ0lDQWdJQzV1YjNST2RXeHNZV0pzWlNncFhHNGdJQ0FnZlNsY2JpQWdmVnh1WEc0Z0lIQjFZbXhwWXlCaGMzbHVZeUJrYjNkdUlDZ3BJSHRjYmlBZ0lDQjBhR2x6TG5OamFHVnRZUzVrY205d1ZHRmliR1VvZEdocGN5NTBZV0pzWlU1aGJXVXBYRzRnSUgxY2JuMWNiaUpkZlE9PSJdfQ==