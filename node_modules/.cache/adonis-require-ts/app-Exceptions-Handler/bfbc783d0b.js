"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Logger"));
const HttpExceptionHandler_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/HttpExceptionHandler"));
class ExceptionHandler extends HttpExceptionHandler_1.default {
    constructor() {
        super(Logger_1.default);
    }
    async handle(error, ctx) {
        if (error.status === 422) {
            return ctx.response.status(error.status).send({
                code: 'BAD_REQUEST',
                message: error.message,
                status: error.status,
                errors: error['messages']?.errors ? error['messages'].errors : '',
            });
        }
        if (error.code === 'E_ROW_NOT_FOUND') {
            return ctx.response.status(error.status).send({
                code: 'BAD_REQUEST',
                message: 'resource not found',
                status: 404,
            });
        }
        if (['E_INVALID_AUTH_UID', 'E_INVALID_AUTH_PASSWORD'].includes(error.code || '')) {
            return ctx.response.status(error.status).send({
                code: 'BAD_REQUEST',
                message: 'invalid credentials',
                status: 400,
            });
        }
        return super.handle(error, ctx);
    }
}
exports.default = ExceptionHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFpQkEsc0ZBQTRDO0FBQzVDLGtIQUF3RTtBQUV4RSxNQUFxQixnQkFBaUIsU0FBUSw4QkFBb0I7SUFDaEU7UUFDRSxLQUFLLENBQUMsZ0JBQU0sQ0FBQyxDQUFBO0lBQ2YsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBZ0IsRUFBRSxHQUF3QjtRQUM1RCxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO1lBQ3hCLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDNUMsSUFBSSxFQUFFLGFBQWE7Z0JBQ25CLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztnQkFDdEIsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO2dCQUNwQixNQUFNLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTthQUNsRSxDQUFDLENBQUE7U0FDSDtRQUVELElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxpQkFBaUIsRUFBRTtZQUNwQyxPQUFPLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzVDLElBQUksRUFBRSxhQUFhO2dCQUNuQixPQUFPLEVBQUUsb0JBQW9CO2dCQUM3QixNQUFNLEVBQUUsR0FBRzthQUNaLENBQUMsQ0FBQTtTQUNIO1FBRUQsSUFBSSxDQUFDLG9CQUFvQixFQUFFLHlCQUF5QixDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLEVBQUU7WUFDaEYsT0FBTyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUM1QyxJQUFJLEVBQUUsYUFBYTtnQkFDbkIsT0FBTyxFQUFFLHFCQUFxQjtnQkFDOUIsTUFBTSxFQUFFLEdBQUc7YUFDWixDQUFDLENBQUE7U0FDSDtRQUVELE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDakMsQ0FBQztDQUNGO0FBakNELG1DQWlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXG5pbXBvcnQgeyBFeGNlcHRpb24gfSBmcm9tICdAYWRvbmlzanMvY29yZS9idWlsZC9zdGFuZGFsb25lJ1xuLypcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCBIdHRwIEV4Y2VwdGlvbiBIYW5kbGVyXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnxcbnwgQWRvbmlzSnMgd2lsbCBmb3J3YXJkIGFsbCBleGNlcHRpb25zIG9jY3VycmVkIGR1cmluZyBhbiBIVFRQIHJlcXVlc3QgdG9cbnwgdGhlIGZvbGxvd2luZyBjbGFzcy4gWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGV4Y2VwdGlvbiBoYW5kbGluZyBieVxufCByZWFkaW5nIGRvY3MuXG58XG58IFRoZSBleGNlcHRpb24gaGFuZGxlciBleHRlbmRzIGEgYmFzZSBgSHR0cEV4Y2VwdGlvbkhhbmRsZXJgIHdoaWNoIGlzIG5vdFxufCBtYW5kYXRvcnksIGhvd2V2ZXIgaXQgY2FuIGRvIGxvdCBvZiBoZWF2eSBsaWZ0aW5nIHRvIGhhbmRsZSB0aGUgZXJyb3JzXG58IHByb3Blcmx5LlxufFxuKi9cblxuaW1wb3J0IExvZ2dlciBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0xvZ2dlcidcbmltcG9ydCBIdHRwRXhjZXB0aW9uSGFuZGxlciBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBFeGNlcHRpb25IYW5kbGVyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeGNlcHRpb25IYW5kbGVyIGV4dGVuZHMgSHR0cEV4Y2VwdGlvbkhhbmRsZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoTG9nZ2VyKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGhhbmRsZShlcnJvcjogRXhjZXB0aW9uLCBjdHg6IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBpZiAoZXJyb3Iuc3RhdHVzID09PSA0MjIpIHtcbiAgICAgIHJldHVybiBjdHgucmVzcG9uc2Uuc3RhdHVzKGVycm9yLnN0YXR1cykuc2VuZCh7XG4gICAgICAgIGNvZGU6ICdCQURfUkVRVUVTVCcsXG4gICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgIHN0YXR1czogZXJyb3Iuc3RhdHVzLFxuICAgICAgICBlcnJvcnM6IGVycm9yWydtZXNzYWdlcyddPy5lcnJvcnMgPyBlcnJvclsnbWVzc2FnZXMnXS5lcnJvcnMgOiAnJyxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKGVycm9yLmNvZGUgPT09ICdFX1JPV19OT1RfRk9VTkQnKSB7XG4gICAgICByZXR1cm4gY3R4LnJlc3BvbnNlLnN0YXR1cyhlcnJvci5zdGF0dXMpLnNlbmQoe1xuICAgICAgICBjb2RlOiAnQkFEX1JFUVVFU1QnLFxuICAgICAgICBtZXNzYWdlOiAncmVzb3VyY2Ugbm90IGZvdW5kJyxcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChbJ0VfSU5WQUxJRF9BVVRIX1VJRCcsICdFX0lOVkFMSURfQVVUSF9QQVNTV09SRCddLmluY2x1ZGVzKGVycm9yLmNvZGUgfHwgJycpKSB7XG4gICAgICByZXR1cm4gY3R4LnJlc3BvbnNlLnN0YXR1cyhlcnJvci5zdGF0dXMpLnNlbmQoe1xuICAgICAgICBjb2RlOiAnQkFEX1JFUVVFU1QnLFxuICAgICAgICBtZXNzYWdlOiAnaW52YWxpZCBjcmVkZW50aWFscycsXG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIuaGFuZGxlKGVycm9yLCBjdHgpXG4gIH1cbn1cbiJdfQ==