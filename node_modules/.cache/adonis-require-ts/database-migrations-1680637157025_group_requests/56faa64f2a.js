"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Schema_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Schema"));
class default_1 extends Schema_1.default {
    constructor() {
        super(...arguments);
        this.tableName = 'groups_requests';
    }
    async up() {
        this.schema.createTable(this.tableName, (table) => {
            table.increments('id');
            table.integer('user_id').unsigned().references('id').inTable('users').notNullable();
            table
                .integer('group_id')
                .unsigned()
                .references('id')
                .inTable('groups')
                .onDelete('CASCADE')
                .notNullable();
            table.enum('status', ['PENDING', 'ACCEPTED']).defaultTo('PENDING').notNullable();
            table.timestamps(true);
        });
    }
    async down() {
        this.schema.dropTable(this.tableName);
    }
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY4MDYzNzE1NzAyNV9ncm91cF9yZXF1ZXN0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIjE2ODA2MzcxNTcwMjVfZ3JvdXBfcmVxdWVzdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2IsSUFBSSxlQUFlLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLFVBQVUsR0FBRztJQUNqRSxPQUFPLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUM5RCxDQUFDLENBQUM7QUFDRixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RCxNQUFNLFFBQVEsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7QUFDdkYsTUFBTSxTQUFVLFNBQVEsUUFBUSxDQUFDLE9BQU87SUFDcEM7UUFDSSxLQUFLLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLGlCQUFpQixDQUFDO0lBQ3ZDLENBQUM7SUFDRCxLQUFLLENBQUMsRUFBRTtRQUNKLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUM5QyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZCLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNwRixLQUFLO2lCQUNBLE9BQU8sQ0FBQyxVQUFVLENBQUM7aUJBQ25CLFFBQVEsRUFBRTtpQkFDVixVQUFVLENBQUMsSUFBSSxDQUFDO2lCQUNoQixPQUFPLENBQUMsUUFBUSxDQUFDO2lCQUNqQixRQUFRLENBQUMsU0FBUyxDQUFDO2lCQUNuQixXQUFXLEVBQUUsQ0FBQztZQUNuQixLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNqRixLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNELEtBQUssQ0FBQyxJQUFJO1FBQ04sSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7Q0FDSjtBQUNELE9BQU8sQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBTY2hlbWFfMSA9IF9faW1wb3J0RGVmYXVsdChnbG9iYWxbU3ltYm9sLmZvcignaW9jLnVzZScpXShcIkFkb25pcy9MdWNpZC9TY2hlbWFcIikpO1xuY2xhc3MgZGVmYXVsdF8xIGV4dGVuZHMgU2NoZW1hXzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMudGFibGVOYW1lID0gJ2dyb3Vwc19yZXF1ZXN0cyc7XG4gICAgfVxuICAgIGFzeW5jIHVwKCkge1xuICAgICAgICB0aGlzLnNjaGVtYS5jcmVhdGVUYWJsZSh0aGlzLnRhYmxlTmFtZSwgKHRhYmxlKSA9PiB7XG4gICAgICAgICAgICB0YWJsZS5pbmNyZW1lbnRzKCdpZCcpO1xuICAgICAgICAgICAgdGFibGUuaW50ZWdlcigndXNlcl9pZCcpLnVuc2lnbmVkKCkucmVmZXJlbmNlcygnaWQnKS5pblRhYmxlKCd1c2VycycpLm5vdE51bGxhYmxlKCk7XG4gICAgICAgICAgICB0YWJsZVxuICAgICAgICAgICAgICAgIC5pbnRlZ2VyKCdncm91cF9pZCcpXG4gICAgICAgICAgICAgICAgLnVuc2lnbmVkKClcbiAgICAgICAgICAgICAgICAucmVmZXJlbmNlcygnaWQnKVxuICAgICAgICAgICAgICAgIC5pblRhYmxlKCdncm91cHMnKVxuICAgICAgICAgICAgICAgIC5vbkRlbGV0ZSgnQ0FTQ0FERScpXG4gICAgICAgICAgICAgICAgLm5vdE51bGxhYmxlKCk7XG4gICAgICAgICAgICB0YWJsZS5lbnVtKCdzdGF0dXMnLCBbJ1BFTkRJTkcnLCAnQUNDRVBURUQnXSkuZGVmYXVsdFRvKCdQRU5ESU5HJykubm90TnVsbGFibGUoKTtcbiAgICAgICAgICAgIHRhYmxlLnRpbWVzdGFtcHModHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBkb3duKCkge1xuICAgICAgICB0aGlzLnNjaGVtYS5kcm9wVGFibGUodGhpcy50YWJsZU5hbWUpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGRlZmF1bHRfMTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UWTRNRFl6TnpFMU56QXlOVjluY205MWNGOXlaWEYxWlhOMGN5NXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWpFMk9EQTJNemN4TlRjd01qVmZaM0p2ZFhCZmNtVnhkV1Z6ZEhNdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3UVVGQlFTeDFSa0ZCYVVRN1FVRkZha1FzWlVGQmNVSXNVMEZCVVN4blFrRkJWVHRKUVVGMlF6czdVVUZEV1N4alFVRlRMRWRCUVVjc2FVSkJRV2xDTEVOQlFVRTdTVUZ4UW5wRExFTkJRVU03U1VGdVFsRXNTMEZCU3l4RFFVRkRMRVZCUVVVN1VVRkRZaXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVWQlFVVTdXVUZEYUVRc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUVR0WlFVTjBRaXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVRTdXVUZEYmtZc1MwRkJTenRwUWtGRFJpeFBRVUZQTEVOQlFVTXNWVUZCVlN4RFFVRkRPMmxDUVVOdVFpeFJRVUZSTEVWQlFVVTdhVUpCUTFZc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF6dHBRa0ZEYUVJc1QwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF6dHBRa0ZEYWtJc1VVRkJVU3hEUVVGRExGTkJRVk1zUTBGQlF6dHBRa0ZEYmtJc1YwRkJWeXhGUVVGRkxFTkJRVUU3V1VGRGFFSXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF5eFRRVUZUTEVWQlFVVXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJReXhUUVVGVExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNWMEZCVnl4RlFVRkZMRU5CUVVFN1dVRkRhRVlzUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRVHRSUVVONFFpeERRVUZETEVOQlFVTXNRMEZCUVR0SlFVTktMRU5CUVVNN1NVRkZUU3hMUVVGTExFTkJRVU1zU1VGQlNUdFJRVU5tTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUVR0SlFVTjJReXhEUVVGRE8wTkJRMFk3UVVGMFFrUXNORUpCYzBKRElpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElFSmhjMlZUWTJobGJXRWdabkp2YlNBblFHbHZZenBCWkc5dWFYTXZUSFZqYVdRdlUyTm9aVzFoSjF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJsZUhSbGJtUnpJRUpoYzJWVFkyaGxiV0VnZTF4dUlDQndjbTkwWldOMFpXUWdkR0ZpYkdWT1lXMWxJRDBnSjJkeWIzVndjMTl5WlhGMVpYTjBjeWRjYmx4dUlDQndkV0pzYVdNZ1lYTjVibU1nZFhBZ0tDa2dlMXh1SUNBZ0lIUm9hWE11YzJOb1pXMWhMbU55WldGMFpWUmhZbXhsS0hSb2FYTXVkR0ZpYkdWT1lXMWxMQ0FvZEdGaWJHVXBJRDArSUh0Y2JpQWdJQ0FnSUhSaFlteGxMbWx1WTNKbGJXVnVkSE1vSjJsa0p5bGNiaUFnSUNBZ0lIUmhZbXhsTG1sdWRHVm5aWElvSjNWelpYSmZhV1FuS1M1MWJuTnBaMjVsWkNncExuSmxabVZ5Wlc1alpYTW9KMmxrSnlrdWFXNVVZV0pzWlNnbmRYTmxjbk1uS1M1dWIzUk9kV3hzWVdKc1pTZ3BYRzRnSUNBZ0lDQjBZV0pzWlZ4dUlDQWdJQ0FnSUNBdWFXNTBaV2RsY2lnblozSnZkWEJmYVdRbktWeHVJQ0FnSUNBZ0lDQXVkVzV6YVdkdVpXUW9LVnh1SUNBZ0lDQWdJQ0F1Y21WbVpYSmxibU5sY3lnbmFXUW5LVnh1SUNBZ0lDQWdJQ0F1YVc1VVlXSnNaU2duWjNKdmRYQnpKeWxjYmlBZ0lDQWdJQ0FnTG05dVJHVnNaWFJsS0NkRFFWTkRRVVJGSnlsY2JpQWdJQ0FnSUNBZ0xtNXZkRTUxYkd4aFlteGxLQ2xjYmlBZ0lDQWdJSFJoWW14bExtVnVkVzBvSjNOMFlYUjFjeWNzSUZzblVFVk9SRWxPUnljc0lDZEJRME5GVUZSRlJDZGRLUzVrWldaaGRXeDBWRzhvSjFCRlRrUkpUa2NuS1M1dWIzUk9kV3hzWVdKc1pTZ3BYRzRnSUNBZ0lDQjBZV0pzWlM1MGFXMWxjM1JoYlhCektIUnlkV1VwWEc0Z0lDQWdmU2xjYmlBZ2ZWeHVYRzRnSUhCMVlteHBZeUJoYzNsdVl5QmtiM2R1SUNncElIdGNiaUFnSUNCMGFHbHpMbk5qYUdWdFlTNWtjbTl3VkdGaWJHVW9kR2hwY3k1MFlXSnNaVTVoYldVcFhHNGdJSDFjYm4xY2JpSmRmUT09Il19