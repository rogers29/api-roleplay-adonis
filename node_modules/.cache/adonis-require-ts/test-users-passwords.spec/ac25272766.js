"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Hash_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Hash"));
const index_1 = require("./../../database/factories/index");
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
const luxon_1 = require("luxon");
const japa_1 = __importDefault(require("japa"));
const supertest_1 = __importDefault(require("supertest"));
const Mail_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Addons/Mail"));
const BASE_URL = `http://${process.env.HOST}:${process.env.PORT}`;
japa_1.default.group('Password', (group) => {
    (0, japa_1.default)('it should send and email with forgot password instructions', async (assert) => {
        const user = await index_1.UserFactory.create();
        Mail_1.default.trap((message) => {
            assert.deepEqual(message.to, [
                {
                    address: user.email,
                },
            ]);
            assert.deepEqual(message.from, {
                address: 'no-reply@roleplay.com',
            });
            assert.equal(message.subject, 'Roleplay: recuperação de Senha');
            assert.include(message.html, user.username);
        });
        await (0, supertest_1.default)(BASE_URL)
            .post('/forgot-password')
            .send({
            email: user.email,
            resetPasswordUrl: 'url',
        })
            .expect(204);
        Mail_1.default.restore();
    });
    (0, japa_1.default)('it should create a reset password token', async (assert) => {
        const user = await index_1.UserFactory.create();
        await (0, supertest_1.default)(BASE_URL)
            .post('/forgot-password')
            .send({
            email: user.email,
            resetPasswordUrl: 'url',
        })
            .expect(204);
        const tokens = await user.related('tokens').query();
        assert.isNotEmpty(tokens);
    }).timeout(4000);
    (0, japa_1.default)('it should return 422 when required data is not provided or data is invalid', async (assert) => {
        const { body } = await (0, supertest_1.default)(BASE_URL).post('/forgot-password').send({}).expect(422);
        assert.equal(body.code, 'BAD_REQUEST');
        assert.equal(body.status, 422);
    });
    (0, japa_1.default)('it should be able to reset password', async (assert) => {
        const user = await index_1.UserFactory.create();
        const { token } = await user.related('tokens').create({ token: 'token' });
        await (0, supertest_1.default)(BASE_URL)
            .post('/reset-password')
            .send({ token, password: '123456' })
            .expect(204);
        await user.refresh();
        const checkPassword = await Hash_1.default.verify(user.password, '123456');
        assert.isTrue(checkPassword);
    });
    (0, japa_1.default)('it should return 422 when error reset password', async (assert) => {
        const { body } = await (0, supertest_1.default)(BASE_URL).post('/reset-password').send({}).expect(422);
        assert.equal(body.code, 'BAD_REQUEST');
        assert.equal(body.status, 422);
    });
    (0, japa_1.default)('it should retiurn 404 when usin the same token twice', async (assert) => {
        const user = await index_1.UserFactory.create();
        const { token } = await user.related('tokens').create({ token: 'token' });
        await (0, supertest_1.default)(BASE_URL)
            .post('/reset-password')
            .send({ token, password: '123456' })
            .expect(204);
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post('/reset-password')
            .send({ token, password: '123456' })
            .expect(404);
        assert.equal(body.code, 'BAD_REQUEST');
        assert.equal(body.status, 404);
    });
    (0, japa_1.default)('it cannot reset password when token is expired after 2 hours', async (assert) => {
        const user = await index_1.UserFactory.create();
        const date = luxon_1.DateTime.now().minus(luxon_1.Duration.fromISOTime('02:01'));
        const { token } = await user.related('tokens').create({ token: 'token', createdAt: date });
        const { body } = await (0, supertest_1.default)(BASE_URL)
            .post('/reset-password')
            .send({ token, password: '123456' })
            .expect(410);
        assert.equal(body.code, 'TOKEN_EXPIRED');
        assert.equal(body.status, 410);
        assert.equal(body.message, 'token has expired');
    });
    group.beforeEach(async () => {
        await Database_1.default.beginGlobalTransaction();
    });
    group.afterEach(async () => {
        await Database_1.default.rollbackGlobalTransaction();
    });
});
//# sourceMappingURL=data:application/json;base64,