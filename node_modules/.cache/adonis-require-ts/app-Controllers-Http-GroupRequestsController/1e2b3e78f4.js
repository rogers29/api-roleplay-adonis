"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BadRequestException_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Exceptions/BadRequestException"));
const GroupRequest_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/GroupRequest"));
const Group_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Group"));
class GroupRequestsController {
    async index({ request, response }) {
        const { master } = request.qs();
        if (!master) {
            throw new BadRequestException_1.default('master query should be provided', 422);
        }
        const groupRequests = await GroupRequest_1.default.query()
            .select('id', 'groupId', 'userId', 'status')
            .preload('group', (query) => {
            query.select('name', 'master');
        })
            .preload('user', (query) => {
            query.select('username');
        })
            .whereHas('group', (query) => {
            query.where('master', Number(master));
        })
            .where('status', 'PENDING');
        return response.ok({ groupRequests });
    }
    async store({ request, response, auth }) {
        const groupId = await request.param('groupId');
        const userId = auth.user.id;
        const existingGroupRequest = await GroupRequest_1.default.query()
            .where('groupId', groupId)
            .andWhere('userId', userId)
            .first();
        if (existingGroupRequest) {
            throw new BadRequestException_1.default('group request already exists', 409);
        }
        const userAlreadyInGroup = await Group_1.default.query()
            .whereHas('players', (query) => {
            query.where('id', userId);
        })
            .andWhere('id', groupId)
            .first();
        if (userAlreadyInGroup) {
            throw new BadRequestException_1.default('user is already in the group', 422);
        }
        const groupRequest = await GroupRequest_1.default.create({ groupId, userId });
        await groupRequest.refresh();
        return response.created({ groupRequest });
    }
    async accept({ request, response, bouncer }) {
        const groupId = request.param('groupId');
        const requestId = request.param('requestId');
        const groupRequest = await GroupRequest_1.default.query()
            .where('id', requestId)
            .andWhere('groupId', groupId)
            .firstOrFail();
        await groupRequest.load('group');
        await bouncer.authorize('acceptGroupRequest', groupRequest);
        const updatedGroupRequest = await groupRequest.merge({ status: 'ACCEPTED' }).save();
        await groupRequest.load('group');
        await groupRequest.group.related('players').attach([groupRequest.userId]);
        return response.ok({ groupRequest: updatedGroupRequest });
    }
    async destroy({ request, response, bouncer }) {
        const groupId = request.param('groupId');
        const requestId = request.param('requestId');
        const groupRequest = await GroupRequest_1.default.query()
            .where('id', requestId)
            .andWhere('groupId', groupId)
            .firstOrFail();
        await groupRequest.load('group');
        await bouncer.authorize('rejectGroupRequest', groupRequest);
        await groupRequest.delete();
        return response.ok({});
    }
}
exports.default = GroupRequestsController;
//# sourceMappingURL=data:application/json;base64,